#line 2 "scan_vcd.cpp"

#line 4 "scan_vcd.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer vcd__create_buffer
#define yy_delete_buffer vcd__delete_buffer
#define yy_flex_debug vcd__flex_debug
#define yy_init_buffer vcd__init_buffer
#define yy_flush_buffer vcd__flush_buffer
#define yy_load_buffer_state vcd__load_buffer_state
#define yy_switch_to_buffer vcd__switch_to_buffer
#define yyin vcd_in
#define yyleng vcd_leng
#define yylex vcd_lex
#define yylineno vcd_lineno
#define yyout vcd_out
#define yyrestart vcd_restart
#define yytext vcd_text
#define yywrap vcd_wrap
#define yyalloc vcd_alloc
#define yyrealloc vcd_realloc
#define yyfree vcd_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE vcd_restart(vcd_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int vcd_leng;

extern FILE *vcd_in, *vcd_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE vcd_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-vcd_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < vcd_leng; ++yyl )\
                    if ( vcd_text[yyl] == '\n' )\
                        --vcd_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up vcd_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up vcd_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via vcd_restart()), so that the user can continue scanning by
	 * just pointing vcd_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when vcd_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int vcd_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow vcd_wrap()'s to do buffer switches
 * instead of setting up a fresh vcd_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void vcd_restart (FILE *input_file  );
void vcd__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE vcd__create_buffer (FILE *file,int size  );
void vcd__delete_buffer (YY_BUFFER_STATE b  );
void vcd__flush_buffer (YY_BUFFER_STATE b  );
void vcd_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void vcd_pop_buffer_state (void );

static void vcd_ensure_buffer_stack (void );
static void vcd__load_buffer_state (void );
static void vcd__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER vcd__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE vcd__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE vcd__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE vcd__scan_bytes (yyconst char *bytes,int len  );

void *vcd_alloc (yy_size_t  );
void *vcd_realloc (void *,yy_size_t  );
void vcd_free (void *  );

#define yy_new_buffer vcd__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        vcd_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            vcd__create_buffer(vcd_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        vcd_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            vcd__create_buffer(vcd_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define vcd_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *vcd_in = (FILE *) 0, *vcd_out = (FILE *) 0;

typedef int yy_state_type;

extern int vcd_lineno;

int vcd_lineno = 1;

extern char *vcd_text;
#define yytext_ptr vcd_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up vcd_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	vcd_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[249] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   70,   68,
       67,   67,   67,   54,   68,   36,   35,   41,   40,   37,
       38,   66,   66,   66,   66,   68,    7,   68,   68,   68,
       68,   10,   68,   55,   55,   55,   55,   55,   56,   68,
       68,   68,   68,   68,   68,   68,   57,   58,   62,   63,
       64,   61,   59,   60,   39,   65,   43,   68,   42,   67,
        0,    0,    0,    0,    0,    0,    0,    0,    8,   15,
       11,   13,   14,   12,   55,   55,   55,   55,   55,   55,

       56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   57,   58,   64,   39,   65,   43,   42,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        9,   55,   55,   55,   55,   55,    0,    0,    0,    0,
       22,    0,    0,   26,    0,    0,   34,   42,    0,   42,
        0,    0,    0,    1,    0,    0,    0,   17,    0,    1,
       55,   52,   55,   55,   50,    0,    0,    0,   21,    0,
       25,   30,   31,    0,    0,    0,   32,   33,    0,    3,
        0,    0,    0,    0,    0,    0,   53,   55,   55,   18,
        0,    0,    0,    0,   28,    0,    0,    0,    0,    0,

        0,    5,    0,    0,    0,   55,   49,    0,    0,    0,
       27,   29,    0,    0,    0,   47,    0,    0,    0,    0,
        0,   55,   19,    0,   23,   24,    2,   45,   46,    0,
        0,    0,   16,   44,   51,    0,   48,    0,    0,   20,
        0,    6,    0,    0,    0,    0,    4,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    5,    6,    7,    5,    5,    5,    8,
        9,    5,   10,    5,   11,   12,    5,   13,   14,   15,
       15,   15,   15,   15,   15,   15,   15,   16,    5,    5,
        5,    5,    5,    5,   17,   18,   17,   17,   19,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   20,   17,   17,   17,   17,   17,   21,   17,   22,
       23,    5,   24,    5,   17,    5,   25,   26,   27,   28,

       29,   30,   31,   17,   32,   17,   33,   34,   35,   36,
       37,   38,   17,   39,   40,   41,   42,   43,   44,   21,
       45,   22,    5,    5,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        3,    3,    3,    3,    3,    2,    3,    3,    3,    3,
        3,    3,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3
    } ;

static yyconst flex_int16_t yy_base[258] =
    {   0,
        0,   38,    8,   21,   76,    0,  118,    0,   27,   46,
      162,    0,   34,   64,  206,  230,  253,    0,    2,   10,
       59,   82,   90,   97,  276,  297,  318,  332,  461,  462,
      462,  462,  457,  462,  321,  462,  462,  462,  462,  462,
      462,  462,  462,  456,  429,  428,  443,  415,  414,  413,
      412,  462,  411,    0,  421,   33,  412,  423,   74,  404,
      410,  420,  415,  401,   15,   44,    0,    0,  462,  462,
       89,  462,  462,  462,   94,    0,  157,  154,  168,  462,
      405,  147,  405,  413,  407,  400,   88,  401,  423,  462,
      462,  462,  462,  462,    0,  404,  395,  397,  404,  391,

      171,  401,  388,  389,    2,  389,  391,  393,  388,  384,
      383,    0,    0,  210,  213,    0,  237,  273,  234,  260,
      386,  379,  384,  390,  380,  381,  375,  375,  374,  384,
      462,  379,  377,  382,  366,  374,  370,  376,  379,  369,
      462,  364,  372,  268,  372,  370,  462,  311,  250,  281,
      363,  368,  358,  367,  356,  364,  365,  462,  351,  462,
      354,    0,  348,  354,    0,  346,  355,  350,  462,  350,
      462,  462,  462,  324,  320,  329,  462,  462,  328,  462,
      266,  327,  326,  314,  316,  320,    0,  319,  315,  462,
      312,  310,  293,  309,  462,  296,  287,  283,  160,  291,

      285,  462,  287,  275,  275,  271,    0,  267,  263,  160,
      462,  462,  243,  249,  242,  462,  213,  173,  179,  170,
      162,  159,  462,  164,  462,  462,  462,  462,  462,  152,
      152,   81,  462,  462,    0,   71,  462,   73,   53,  462,
       30,  462,   25,   18,   10,    3,  462,  462,  364,  367,
      370,  373,  376,   16,  378,    2,  380
    } ;

static yyconst flex_int16_t yy_def[258] =
    {   0,
      249,  249,  250,  250,  249,    5,  248,    7,  250,  250,
      249,   11,  251,  251,  252,  252,  249,   17,    2,    2,
      249,  249,  253,  253,  249,  249,  249,  249,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  254,  254,  254,  254,  254,  248,  248,
      248,  248,  248,  248,  248,  248,  255,  256,  248,  248,
      248,  248,  248,  248,  248,  257,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  254,  254,  254,  254,  254,  254,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  255,  256,  248,  248,  257,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  254,  254,  254,  254,  254,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      254,  254,  254,  254,  254,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  254,  254,  254,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  254,  254,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  254,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  254,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,    0,  248,  248,
      248,  248,  248,  248,  248,  248,  248
    } ;

static yyconst flex_int16_t yy_nxt[508] =
    {   0,
      248,   31,   32,   33,  113,   34,   35,   30,   46,   43,
       32,   44,   36,   37,   45,   30,   46,   38,   95,   39,
       40,   41,   43,   32,   44,   38,  140,   45,   43,   32,
       44,  248,  141,   45,   30,   31,   32,   33,   39,   31,
       32,   33,  247,   34,   35,  246,  107,   43,   32,   44,
       36,   37,   45,  108,  245,   38,  244,   39,   40,   41,
       31,   32,   33,   38,   30,   31,   32,   33,  109,   97,
      243,   75,   75,   75,   98,  110,   39,   31,   32,   33,
      111,  242,   46,   31,   32,   33,  101,  101,  101,   47,
       30,   31,   32,   33,   75,   75,   75,   30,   31,   32,

       33,  114,  114,  114,  241,   48,  115,  115,  115,  240,
       49,   50,  128,   51,  239,   52,  129,   53,   30,   31,
       32,   33,   30,   30,   46,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   54,   54,   54,   54,   54,   54,
       30,   30,   54,   55,   54,   54,   54,   56,   54,   54,
       54,   54,   57,   54,   54,   54,   54,   54,   58,   54,
       54,   54,   54,   31,   32,   33,  118,  118,  118,  117,
      117,  122,  225,  226,   59,   59,   59,  117,  117,  119,
      118,  118,  118,  101,  101,  101,  120,  238,  123,  215,
       60,  237,  236,   61,  235,  216,  120,  234,  233,   62,

       63,   64,   65,  232,  231,   66,   30,   31,   32,   33,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,  114,  114,  114,  115,  115,  115,   30,   30,
       30,   31,   32,   33,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,  148,  148,  148,  117,
      117,  230,   30,   30,   31,   32,   33,  117,  117,   46,
       69,   70,  150,  150,  150,   71,   71,   71,   72,  149,
      149,  229,  150,  150,  150,   73,   74,   31,   32,   33,
      172,  173,  228,  227,  119,  118,  118,  118,   77,   77,
      198,  120,  174,  150,  150,  150,   77,   77,   31,   32,

       33,  120,  199,  224,  175,  223,  176,  222,  200,   77,
       77,  221,  220,  219,  218,  217,  214,   77,   77,   31,
       32,   33,  213,  148,  148,  148,  212,   78,   78,  120,
       79,   79,   79,   31,   32,   33,  211,  210,  209,  120,
      208,   78,   78,  207,   79,   79,   79,   81,   82,   83,
      206,  205,  204,  203,  202,  201,  197,  196,  195,  194,
       84,   85,   86,   87,   30,   30,   30,   42,   42,   42,
       67,   67,   67,   68,   68,   68,   76,   76,   76,  112,
      112,  116,  116,  193,  192,  191,  190,  189,  188,  187,
      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,

      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,
      161,  160,  159,  158,  157,  156,  155,  154,  153,  152,
      151,  147,  146,  145,  144,  143,  142,  139,  138,  137,
      136,  135,  134,  133,  132,  131,  130,  127,  126,  125,
      124,  121,  106,  105,  104,  103,  102,  100,   99,   96,
       94,   93,   92,   91,   90,   89,   88,   88,   80,   80,
      248,   29,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248
    } ;

static yyconst flex_int16_t yy_chk[508] =
    {   0,
        0,    1,    1,    1,  256,    1,    1,   19,   19,    3,
        3,    3,    1,    1,    3,   20,   20,    1,  254,    1,
        1,    1,    4,    4,    4,    1,  105,    4,    9,    9,
        9,    0,  105,    9,   13,   13,   13,   13,    1,    2,
        2,    2,  246,    2,    2,  245,   65,   10,   10,   10,
        2,    2,   10,   65,  244,    2,  243,    2,    2,    2,
       21,   21,   21,    2,   14,   14,   14,   14,   66,   56,
      241,   21,   21,   21,   56,   66,    2,    5,    5,    5,
       66,  239,    5,   22,   22,   22,   59,   59,   59,    5,
       23,   23,   23,   23,   22,   22,   22,   24,   24,   24,

       24,   71,   71,   71,  238,    5,   75,   75,   75,  236,
        5,    5,   87,    5,  232,    5,   87,    5,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   11,   11,   11,   78,   78,   78,   77,
       77,   82,  210,  210,   11,   11,   11,   77,   77,   79,
       79,   79,   79,  101,  101,  101,   79,  231,   82,  199,
       11,  230,  224,   11,  222,  199,   79,  221,  220,   11,

       11,   11,   11,  219,  218,   11,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,  114,  114,  114,  115,  115,  115,   15,   15,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,  119,  119,  119,  117,
      117,  217,   16,   16,   17,   17,   17,  117,  117,   17,
       17,   17,  149,  149,  149,   17,   17,   17,   17,  120,
      120,  215,  120,  120,  120,   17,   17,   25,   25,   25,
      144,  144,  214,  213,  118,  118,  118,  118,   25,   25,
      181,  118,  144,  150,  150,  150,   25,   25,   26,   26,

       26,  118,  181,  209,  144,  208,  144,  206,  181,   26,
       26,  205,  204,  203,  201,  200,  198,   26,   26,   27,
       27,   27,  197,  148,  148,  148,  196,   27,   27,  148,
       27,   27,   27,   28,   28,   28,  194,  193,  192,  148,
      191,   28,   28,  189,   28,   28,   28,   35,   35,   35,
      188,  186,  185,  184,  183,  182,  179,  176,  175,  174,
       35,   35,   35,   35,  249,  249,  249,  250,  250,  250,
      251,  251,  251,  252,  252,  252,  253,  253,  253,  255,
      255,  257,  257,  170,  168,  167,  166,  164,  163,  161,
      159,  157,  156,  155,  154,  153,  152,  151,  146,  145,

      143,  142,  140,  139,  138,  137,  136,  135,  134,  133,
      132,  130,  129,  128,  127,  126,  125,  124,  123,  122,
      121,  111,  110,  109,  108,  107,  106,  104,  103,  102,
      100,   99,   98,   97,   96,   89,   88,   86,   85,   84,
       83,   81,   64,   63,   62,   61,   60,   58,   57,   55,
       53,   51,   50,   49,   48,   47,   46,   45,   44,   33,
       29,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[70] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int vcd__flex_debug;
int vcd__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *vcd_text;
#line 1 "scan_vcd.l"
/* -*-c-*- */
#line 4 "scan_vcd.l"
/*
 * scan_vcd.l - scanner for a VCD data file
 *
 * Copyright (C) 2005 Raimund Jacob <raimi@lkcc.org>
 * Copyright (C) 2006, 2007, 2008 Stefan Jahn <stefan@lkcc.org>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.  
 *
 * $Id$
 *
 */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "check_vcd.h"
#include "tokens_vcd.h"

#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif



#line 750 "scan_vcd.cpp"

#define INITIAL 0
#define COMMENT 1
#define SCALE 2
#define SCOPE 3
#define IGNORE 4
#define VAR 5
#define VAR2 6
#define VAR3 7
#define VAR4 8
#define DUMP 9
#define TIMESTAMP 10
#define CHANGE 11
#define BIN 12
#define FLOAT 13

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int vcd_lex_destroy (void );

int vcd_get_debug (void );

void vcd_set_debug (int debug_flag  );

YY_EXTRA_TYPE vcd_get_extra (void );

void vcd_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *vcd_get_in (void );

void vcd_set_in  (FILE * in_str  );

FILE *vcd_get_out (void );

void vcd_set_out  (FILE * out_str  );

int vcd_get_leng (void );

char *vcd_get_text (void );

int vcd_get_lineno (void );

void vcd_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int vcd_wrap (void );
#else
extern int vcd_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( vcd_text, vcd_leng, 1, vcd_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( vcd_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( vcd_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, vcd_in))==0 && ferror(vcd_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(vcd_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int vcd_lex (void);

#define YY_DECL int vcd_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after vcd_text and vcd_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 72 "scan_vcd.l"


#line 943 "scan_vcd.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! vcd_in )
			vcd_in = stdin;

		if ( ! vcd_out )
			vcd_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			vcd_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				vcd__create_buffer(vcd_in,YY_BUF_SIZE );
		}

		vcd__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of vcd_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 249 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 462 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < vcd_leng; ++yyl )
				if ( vcd_text[yyl] == '\n' )
					   
    vcd_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 74 "scan_vcd.l"
{
  BEGIN(INITIAL);
  return t_END;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "scan_vcd.l"
{
  BEGIN(COMMENT);
  return t_COMMENT;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 84 "scan_vcd.l"
{
  BEGIN(IGNORE);
  return t_DATE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "scan_vcd.l"
{
  return t_ENDDEFINITIONS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "scan_vcd.l"
{
  BEGIN(SCOPE);
  return t_SCOPE;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 98 "scan_vcd.l"
{
  BEGIN(SCALE);
  return t_TIMESCALE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 103 "scan_vcd.l"
{ return ONE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 104 "scan_vcd.l"
{ return TEN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "scan_vcd.l"
{ return HUNDRET; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 107 "scan_vcd.l"
{ return SECOND; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 108 "scan_vcd.l"
{ return MILLI;  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "scan_vcd.l"
{ return MICRO;  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 110 "scan_vcd.l"
{ return NANO;   }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 111 "scan_vcd.l"
{ return PICO;   }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 112 "scan_vcd.l"
{ return FEMTO;  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 114 "scan_vcd.l"
{
  return t_UPSCOPE;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 118 "scan_vcd.l"
{
  BEGIN(VAR);
  return t_VAR;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 123 "scan_vcd.l"
{ return EVENT;     }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 124 "scan_vcd.l"
{ return INTEGER;   }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 125 "scan_vcd.l"
{ return PARAMETER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 126 "scan_vcd.l"
{ return REAL;      }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 127 "scan_vcd.l"
{ return REG;       }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 128 "scan_vcd.l"
{ return SUPPLY0;   }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 129 "scan_vcd.l"
{ return SUPPLY1;   }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 130 "scan_vcd.l"
{ return TIME;      }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "scan_vcd.l"
{ return TRI;       }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 132 "scan_vcd.l"
{ return TRIAND;    }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 133 "scan_vcd.l"
{ return TRIOR;     }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 134 "scan_vcd.l"
{ return TRIREG;    }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 135 "scan_vcd.l"
{ return TRI0;      }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "scan_vcd.l"
{ return TRI1;      }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "scan_vcd.l"
{ return WAND;      }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "scan_vcd.l"
{ return WIRE;      }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "scan_vcd.l"
{ return WOR;       }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 141 "scan_vcd.l"
{
  vcd_lval.value = strdup (vcd_text);
  BEGIN(CHANGE);
  return ONE;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 147 "scan_vcd.l"
{
  vcd_lval.value = strdup (vcd_text);
  BEGIN(CHANGE);
  return ZERO;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 153 "scan_vcd.l"
{
  vcd_lval.value = strdup ("X");
  BEGIN(CHANGE);
  return X;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 159 "scan_vcd.l"
{
  vcd_lval.value = strdup ("Z");
  BEGIN(CHANGE);
  return Z;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "scan_vcd.l"
{
  vcd_lval.real = strtod (vcd_text, NULL);
  BEGIN(INITIAL);
  return PositiveHugeInteger;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "scan_vcd.l"
{
  BEGIN(FLOAT);
  return 'R';
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 176 "scan_vcd.l"
{
  BEGIN(BIN);
  return 'B';
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 181 "scan_vcd.l"
{
  vcd_lval.value = strdup (vcd_text);
  BEGIN(CHANGE);
  return Real;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 187 "scan_vcd.l"
{
  vcd_lval.value = strdup (vcd_text);
  char * p = vcd_lval.value;
  while (*p) { *p = toupper (*p); p++; }
  BEGIN(CHANGE);
  return Binary;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 195 "scan_vcd.l"
{
  BEGIN(IGNORE);
  return t_VERSION;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "scan_vcd.l"
{
  return t_DUMPALL;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 204 "scan_vcd.l"
{
  return t_DUMPOFF;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 208 "scan_vcd.l"
{
  return t_DUMPON;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 212 "scan_vcd.l"
{
  BEGIN(DUMP);
  return t_DUMPVARS;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 217 "scan_vcd.l"
{ return s_MODULE;   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 218 "scan_vcd.l"
{ return s_TASK;     }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 219 "scan_vcd.l"
{ return s_FUNCTION; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 220 "scan_vcd.l"
{ return s_FORK;     }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 221 "scan_vcd.l"
{ return s_BEGIN;    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 223 "scan_vcd.l"
{
  BEGIN(TIMESTAMP);
  return HASHMARK;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 228 "scan_vcd.l"
{
  vcd_lval.ident = strdup (vcd_text);
  return Identifier;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 233 "scan_vcd.l"
{
  vcd_lval.integer = atoi (vcd_text);
  BEGIN(VAR2);
  return PositiveInteger;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 239 "scan_vcd.l"
{
  vcd_lval.ident = strdup (vcd_text);
  BEGIN(VAR3);
  return IdentifierCode;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 245 "scan_vcd.l"
{
  vcd_lval.ident = strdup (vcd_text);
  BEGIN(VAR4);
  return Reference;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 251 "scan_vcd.l"
{ /* pass the '[' to the parser */ return '['; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 252 "scan_vcd.l"
{ /* pass the ']' to the parser */ return ']'; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 253 "scan_vcd.l"
{ /* pass the ':' to the parser */ return ':'; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 254 "scan_vcd.l"
{ /* pass the '(' to the parser */ return '('; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 255 "scan_vcd.l"
{ /* pass the ')' to the parser */ return ')'; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 257 "scan_vcd.l"
{
  vcd_lval.integer = atoi (vcd_text);
  return PositiveInteger;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 262 "scan_vcd.l"
{
  vcd_lval.ident = strdup (vcd_text);
  BEGIN(INITIAL);
  return IdentifierCode;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "scan_vcd.l"
{ /* skip any character in here */ }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 269 "scan_vcd.l"
{ /* skip end of line and spaces */ }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 271 "scan_vcd.l"
{ /* any other character is invalid */
  fprintf (stderr, 
	   "line %d: syntax error, unrecognized character: `%s'\n", 
	   vcd_lineno, vcd_text);
  return InvalidCharacter;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 278 "scan_vcd.l"
ECHO;
	YY_BREAK
#line 1482 "scan_vcd.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(SCALE):
case YY_STATE_EOF(SCOPE):
case YY_STATE_EOF(IGNORE):
case YY_STATE_EOF(VAR):
case YY_STATE_EOF(VAR2):
case YY_STATE_EOF(VAR3):
case YY_STATE_EOF(VAR4):
case YY_STATE_EOF(DUMP):
case YY_STATE_EOF(TIMESTAMP):
case YY_STATE_EOF(CHANGE):
case YY_STATE_EOF(BIN):
case YY_STATE_EOF(FLOAT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed vcd_in at a new source and called
			 * vcd_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = vcd_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( vcd_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * vcd_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of vcd_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					vcd_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			vcd_restart(vcd_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) vcd_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 249 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 249 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 248);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					vcd_restart(vcd_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( vcd_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve vcd_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    vcd_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void vcd_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        vcd_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            vcd__create_buffer(vcd_in,YY_BUF_SIZE );
	}

	vcd__init_buffer(YY_CURRENT_BUFFER,input_file );
	vcd__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void vcd__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		vcd_pop_buffer_state();
	 *		vcd_push_buffer_state(new_buffer);
     */
	vcd_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	vcd__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (vcd_wrap()) processing, but the only time this flag
	 * is looked at is after vcd_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void vcd__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	vcd_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE vcd__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) vcd_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in vcd__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) vcd_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in vcd__create_buffer()" );

	b->yy_is_our_buffer = 1;

	vcd__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with vcd__create_buffer()
 * 
 */
    void vcd__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		vcd_free((void *) b->yy_ch_buf  );

	vcd_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a vcd_restart() or at EOF.
 */
    static void vcd__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	vcd__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then vcd__init_buffer was _probably_
     * called from vcd_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void vcd__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		vcd__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void vcd_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	vcd_ensure_buffer_stack();

	/* This block is copied from vcd__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from vcd__switch_to_buffer. */
	vcd__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void vcd_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	vcd__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		vcd__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void vcd_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)vcd_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in vcd_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)vcd_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in vcd_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE vcd__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) vcd_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in vcd__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	vcd__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to vcd_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       vcd__scan_bytes() instead.
 */
YY_BUFFER_STATE vcd__scan_string (yyconst char * yystr )
{
    
	return vcd__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to vcd_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE vcd__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) vcd_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in vcd__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = vcd__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in vcd__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up vcd_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		vcd_text[vcd_leng] = (yy_hold_char); \
		(yy_c_buf_p) = vcd_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		vcd_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int vcd_get_lineno  (void)
{
        
    return vcd_lineno;
}

/** Get the input stream.
 * 
 */
FILE *vcd_get_in  (void)
{
        return vcd_in;
}

/** Get the output stream.
 * 
 */
FILE *vcd_get_out  (void)
{
        return vcd_out;
}

/** Get the length of the current token.
 * 
 */
int vcd_get_leng  (void)
{
        return vcd_leng;
}

/** Get the current token.
 * 
 */

char *vcd_get_text  (void)
{
        return vcd_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void vcd_set_lineno (int  line_number )
{
    
    vcd_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see vcd__switch_to_buffer
 */
void vcd_set_in (FILE *  in_str )
{
        vcd_in = in_str ;
}

void vcd_set_out (FILE *  out_str )
{
        vcd_out = out_str ;
}

int vcd_get_debug  (void)
{
        return vcd__flex_debug;
}

void vcd_set_debug (int  bdebug )
{
        vcd__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from vcd_lex_destroy(), so don't allocate here.
     */

    /* We do not touch vcd_lineno unless the option is enabled. */
    vcd_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    vcd_in = stdin;
    vcd_out = stdout;
#else
    vcd_in = (FILE *) 0;
    vcd_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * vcd_lex_init()
     */
    return 0;
}

/* vcd_lex_destroy is for both reentrant and non-reentrant scanners. */
int vcd_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		vcd__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		vcd_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	vcd_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * vcd_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *vcd_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *vcd_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void vcd_free (void * ptr )
{
	free( (char *) ptr );	/* see vcd_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 278 "scan_vcd.l"



