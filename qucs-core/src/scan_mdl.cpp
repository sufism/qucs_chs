#line 2 "scan_mdl.cpp"

#line 4 "scan_mdl.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer mdl__create_buffer
#define yy_delete_buffer mdl__delete_buffer
#define yy_flex_debug mdl__flex_debug
#define yy_init_buffer mdl__init_buffer
#define yy_flush_buffer mdl__flush_buffer
#define yy_load_buffer_state mdl__load_buffer_state
#define yy_switch_to_buffer mdl__switch_to_buffer
#define yyin mdl_in
#define yyleng mdl_leng
#define yylex mdl_lex
#define yylineno mdl_lineno
#define yyout mdl_out
#define yyrestart mdl_restart
#define yytext mdl_text
#define yywrap mdl_wrap
#define yyalloc mdl_alloc
#define yyrealloc mdl_realloc
#define yyfree mdl_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE mdl_restart(mdl_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int mdl_leng;

extern FILE *mdl_in, *mdl_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE mdl_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-mdl_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < mdl_leng; ++yyl )\
                    if ( mdl_text[yyl] == '\n' )\
                        --mdl_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mdl_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up mdl_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via mdl_restart()), so that the user can continue scanning by
	 * just pointing mdl_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when mdl_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int mdl_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow mdl_wrap()'s to do buffer switches
 * instead of setting up a fresh mdl_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void mdl_restart (FILE *input_file  );
void mdl__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE mdl__create_buffer (FILE *file,int size  );
void mdl__delete_buffer (YY_BUFFER_STATE b  );
void mdl__flush_buffer (YY_BUFFER_STATE b  );
void mdl_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void mdl_pop_buffer_state (void );

static void mdl_ensure_buffer_stack (void );
static void mdl__load_buffer_state (void );
static void mdl__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER mdl__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE mdl__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE mdl__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE mdl__scan_bytes (yyconst char *bytes,int len  );

void *mdl_alloc (yy_size_t  );
void *mdl_realloc (void *,yy_size_t  );
void mdl_free (void *  );

#define yy_new_buffer mdl__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        mdl_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mdl__create_buffer(mdl_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        mdl_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            mdl__create_buffer(mdl_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define mdl_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *mdl_in = (FILE *) 0, *mdl_out = (FILE *) 0;

typedef int yy_state_type;

extern int mdl_lineno;

int mdl_lineno = 1;

extern char *mdl_text;
#define yytext_ptr mdl_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up mdl_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	mdl_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 48
#define YY_END_OF_BUFFER 49
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[314] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   49,   47,   44,   44,   44,   47,   47,   37,
       38,   42,   43,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   39,   46,   44,   44,   45,   40,   47,   47,
       47,   47,   47,   47,   47,   47,   41,   44,    0,    3,
       37,    0,    0,    0,   38,    0,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,

       38,   38,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    2,    0,    0,    0,   37,    0,   37,   38,   38,
        0,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   38,    0,   38,   38,
       38,    1,   38,   38,   38,   38,    4,   38,   38,   38,
       38,   38,   13,   38,   38,   18,   38,   38,   38,   38,
       38,   38,   38,   30,   24,    0,    0,    0,    0,    0,
       38,    0,   38,   38,   38,   38,   38,   38,   38,    5,

       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       28,   38,   16,   29,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,    0,   33,   38,   31,   38,   38,
       38,   38,   38,   38,   17,   38,   38,   34,    8,    9,
       38,   38,    7,   38,   38,    0,   32,   38,   38,   14,
       38,   38,   12,   38,   38,   11,   38,   38,   38,    0,
       38,   35,   15,   25,   27,   26,   10,   23,   38,    0,
       38,   38,    0,   38,   38,    0,   36,   38,    0,   38,
        0,   38,   38,    0,   38,   38,    0,   19,   38,    0,
       38,    0,   38,    6,   38,   38,   38,   38,   38,   38,

       38,   38,   20,   38,   38,   38,   38,   38,   21,   38,
       38,   22,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    7,    8,    7,    9,    1,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    1,    1,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   17,   20,   21,   22,   23,   24,   25,
       17,   26,   27,   28,   29,   30,   31,   32,   33,   17,
       34,    1,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   17,   42,   17,   43,   17,   44,   45,   46,   47,
       48,   49,   17,   50,   51,   52,   53,   17,   54,   17,
       55,   56,   57,    1,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    4,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1
    } ;

static yyconst flex_int16_t yy_base[323] =
    {   0,
        0,   58,    9,   13,  115,  120,   17,  125,  129,  133,
       21,  137,  194,    0,    0,    0,    0,    0,  143,  147,
       25,  151,  655,  901,  901,  901,  651,  636,  624,  148,
       22,  901,  901,  150,  151,  134,  157,  153,  179,  171,
      160,  183,  193,  201,  203,  206,  205,  211,  216,  220,
      222,  224,  901,  901,  901,  615,  901,  901,   13,   22,
       28,  549,   17,  543,  555,  551,  901,  901,  559,  901,
      253,  550,   33,  546,  225,  544,  235,  238,  242,  261,
      243,  264,  265,  269,  271,  273,  274,  276,  277,  280,
      282,  287,  284,  281,  295,  300,  297,  308,  314,  321,

      324,  328,  469,  465,  454,  449,  443,  413,  396,  375,
      375,  901,  379,  372,  366,  160,  379,  370,   32,  329,
       38,  331,  330,  344,  334,  347,  358,  348,  362,  351,
      361,  364,  375,  377,  379,  367,  384,  388,  393,  378,
      398,  399,  408,  411,  412,  414,  416,  366,  352,  326,
      334,  316,  321,  294,  276,  291,  420,  290,  425,  429,
      447,  427,  443,  435,  455,  428,  457,  458,  459,  463,
      464,  465,  469,  471,  466,  474,  475,  476,  477,  478,
      481,  485,  493,  497,  509,  273,  267,  262,  229,  206,
      214,  511,  515,  516,  523,  521,  519,  529,  532,  539,

      530,  536,  538,  542,  543,  550,  549,  552,  553,  562,
      566,  573,  580,  585,  586,  202,  901,  589,  593,  592,
      596,  597,  588,  595,  187,  602,  606,  612,  615,  616,
      619,  623,  624,  630,  628,  632,  635,  636,  639,  642,
      663,  656,  643,  647,  651,  162,  652,  659,  654,  674,
      675,  678,  680,  683,  687,  689,  692,  691,  693,  166,
      696,  697,  698,  701,  702,  704,  706,  709,  713,  143,
      720,  724,  146,  733,  735,  149,  736,  737,  130,  740,
      130,  739,  741,   44,  744,  748,   26,  752,  756,   42,
      763,   44,  775,  901,  774,  772,  780,  783,  784,  785,

      790,  796,  791,  798,  806,  794,  811,  822,  818,  820,
      824,  825,  901,  876,  880,  884,  888,  891,   46,  894,
       42,  897
    } ;

static yyconst flex_int16_t yy_def[323] =
    {   0,
      314,  313,  315,  315,  315,  315,  316,  316,  315,  315,
      316,  316,  315,   13,   13,   13,   13,   13,  315,  315,
      316,  316,  313,  313,  313,  313,  313,  317,  313,  313,
      318,  313,  313,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  317,  313,
      313,  313,  313,  319,  318,  313,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  320,
      313,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  313,  313,  313,
      313,  313,  313,  313,  313,  321,  320,  313,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  313,  313,  313,  313,  313,
      322,  313,  318,  318,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  322,  313,  318,  318,  318,
      318,  318,  318,  318,  313,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  313,  318,  318,  318,  318,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  313,
      318,  318,  318,  318,  318,  318,  318,  318,  318,  313,
      318,  318,  313,  318,  318,  313,  318,  318,  313,  318,
      313,  318,  318,  313,  318,  318,  313,  318,  318,  313,
      318,  313,  318,  313,  318,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      318,  318,    0,  313,  313,  313,  313,  313,  313,  313,
      313,  313
    } ;

static yyconst flex_int16_t yy_nxt[960] =
    {   0,
       24,   25,   26,   27,   25,   28,   29,   24,   24,   30,
       25,   26,   27,   25,   25,   26,   27,   25,   55,   26,
       56,   55,   55,   26,   56,   55,   55,   26,   56,   55,
       74,  103,  105,   24,   24,   24,  104,  111,  108,  117,
      156,  119,  118,  112,  191,  158,  106,  121,  120,  294,
      107,  109,  292,  290,  287,   76,   32,   33,   24,   25,
       26,   27,   25,   28,   29,   24,   24,   30,   31,   34,
       35,   31,   31,   31,   31,   36,   31,   31,   37,   31,
       31,   38,   39,   31,   31,   40,   31,   41,   31,   31,
       31,   24,   24,   24,   42,   31,   43,   44,   45,   31,

       31,   31,   46,   47,   31,   48,   49,   50,   51,   52,
       31,   31,   31,   31,   32,   33,   25,   26,   27,   25,
       28,   25,   26,   27,   25,   28,   55,   26,   56,   55,
       25,   26,   27,   25,   25,   26,   27,   25,   55,   26,
       56,   55,   74,  284,   25,   26,   27,   25,   25,   26,
       27,   25,   55,   26,   56,   55,   72,   71,   74,   74,
      281,   74,   73,  279,  276,   74,   79,   76,   74,  116,
       77,   53,  273,   78,   73,   80,   53,   81,  270,   74,
      260,   84,   57,   76,   76,   58,   76,   74,   73,   58,
       76,   74,  246,   76,   57,   25,   26,   27,   25,   67,

       73,   74,   85,   67,   76,   82,   59,   60,   57,   74,
      156,   74,   76,   74,   74,   61,   76,   62,   63,   74,
       64,   65,  156,   83,   74,   66,   76,  112,   74,   87,
       74,   86,   74,   74,   76,   88,   76,   90,   76,   76,
       89,  112,   91,   74,   76,   94,   74,   92,   93,   76,
       74,   74,   96,   76,  122,   76,   99,   76,   76,   95,
       97,   72,   71,   98,  101,  123,  124,   73,   76,   74,
      126,   76,   74,   74,  100,   76,   76,   74,  102,   74,
      129,   74,   74,  125,   74,   74,  112,  112,   74,   74,
       74,  127,   74,   73,   76,   74,  112,   76,   76,  192,

      119,  190,   76,   74,   76,   74,   76,   76,   74,   76,
       76,  130,  128,   76,   76,   76,   74,   76,  132,  189,
       76,  131,   74,  134,  136,  133,  139,  137,   76,   74,
       76,  135,   74,   76,  138,  188,   74,   74,   74,   74,
      160,   76,   74,  112,  142,  159,  140,   76,  187,  141,
      143,  186,   74,  162,   76,   74,   74,   76,  145,   74,
      144,   76,   76,   76,   76,  163,   74,   76,  164,   74,
       74,  161,   74,  146,  112,   74,  147,   76,  112,  118,
       76,   76,  166,   74,   76,   74,   74,   74,  118,  155,
      154,   76,   74,  153,   76,   76,   74,   76,  152,  165,

       76,   74,  112,  169,  167,  168,   74,   74,   76,  151,
       76,   76,   76,  171,  170,  173,   74,   76,  174,   74,
       74,   76,   74,  172,   74,  150,   76,  178,   74,  175,
      177,   76,   76,   74,  179,   74,   74,   74,  193,  176,
      194,   76,  200,   74,   76,   76,  197,   76,  183,   76,
      180,   74,  182,   76,  181,   74,  185,  195,   76,  184,
       76,   76,   76,   74,  196,   74,   74,   74,   76,  198,
      112,   74,   74,   74,   74,  112,   76,   74,  199,   74,
       76,  112,   74,   74,   74,   74,   74,  149,   76,   74,
       76,   76,   76,   74,  148,  202,   76,   76,   76,   76,

      201,   74,   76,  203,   76,   74,  208,   76,   76,   76,
       76,   76,  210,  205,   76,  209,  204,   74,   76,  206,
      192,  207,  211,   74,   74,  214,   76,   74,  212,   74,
       76,   74,  213,  218,  220,  221,  219,   74,   74,  222,
       74,  215,   76,  225,   74,  217,   74,   74,   76,   76,
       74,   74,   76,  121,   76,  119,   76,   74,   74,  116,
       74,   74,   76,   76,   70,   76,  115,  114,  226,   76,
       74,   76,   76,  113,   74,   76,   76,  110,  223,  230,
      224,   74,   76,   76,  229,   76,   76,  227,   74,  228,
      231,  233,  232,   74,   74,   76,   74,   74,  234,   76,

       74,   74,  235,   74,   74,   74,   76,  240,  236,  242,
       74,  243,  241,   76,   74,  237,  239,   68,   76,   76,
       74,   76,   76,   74,   74,   76,   76,   74,   76,   76,
       76,   74,   74,   71,  238,   76,   74,  244,   74,   76,
       74,   70,  247,   74,   74,   76,  245,   74,   76,   76,
       74,   74,   76,   68,  313,   74,   76,   76,  249,   74,
       74,   76,   74,   76,   74,   76,  248,   74,   76,   76,
      250,   74,   76,  254,  257,   76,   76,  256,  251,  252,
       76,  253,   74,   74,   76,   76,   74,   76,   74,   76,
      255,   74,   76,  259,  258,   74,   76,   74,  261,   74,

       74,   74,  313,  262,   74,   74,   74,   76,   76,   74,
       74,   76,   74,   76,   74,  263,   76,   74,  264,  267,
       76,   74,   76,  265,   76,   76,   76,  266,   74,   76,
       76,   76,   74,  313,   76,   76,  271,   76,  269,   76,
      268,   74,   76,   74,   74,   74,   76,   74,   74,   74,
      313,  313,   74,   76,  313,  272,   74,   76,  274,  313,
       74,  313,  313,  282,   74,  313,   76,  283,   76,   76,
       76,   74,   76,   76,   76,  278,  277,   76,  313,  275,
       74,   76,   74,   74,  289,   76,  280,  285,   74,   76,
      286,   74,   74,   74,  291,  288,   76,  295,   74,   74,

      296,  297,   74,  293,   74,   76,   74,   76,   76,  313,
      298,  313,  299,   76,   74,  304,   76,   76,   76,   74,
      300,  313,  305,   76,   76,  302,   74,   76,   74,   76,
       74,   76,   74,   74,  301,  308,  303,  313,  306,   76,
      313,  313,  313,  313,   76,  313,  307,  313,  310,  313,
      313,   76,  313,   76,  313,   76,  313,   76,   76,  313,
      311,  313,  309,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  312,   31,   31,   31,   31,
       24,   24,   24,   24,   54,   54,   54,   54,   69,   69,
       69,   69,   75,   75,   75,  157,  157,  157,  216,  216,

       23,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313
    } ;

static yyconst flex_int16_t yy_chk[960] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    4,    4,    4,    4,    7,    7,
        7,    7,   11,   11,   11,   11,   21,   21,   21,   21,
       31,   59,   60,    1,    1,    1,   59,   63,   61,   73,
      119,  119,   73,   63,  321,  121,   60,  121,  319,  292,
       60,   61,  290,  287,  284,   31,    1,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    5,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    8,    8,    8,    8,
        9,    9,    9,    9,   10,   10,   10,   10,   12,   12,
       12,   12,   36,  281,   19,   19,   19,   19,   20,   20,
       20,   20,   22,   22,   22,   22,   30,   30,   34,   35,
      279,   38,   30,  276,  273,   37,   36,   36,   41,  116,
       34,    5,  270,   35,  116,   37,    6,   38,  260,   40,
      246,   40,    8,   34,   35,    9,   38,   39,   30,   10,
       37,   42,  225,   41,   12,   13,   13,   13,   13,   19,

      116,   43,   41,   20,   40,   39,   13,   13,   22,   44,
      216,   45,   39,   47,   46,   13,   42,   13,   13,   48,
       13,   13,  191,   39,   49,   13,   43,  190,   50,   43,
       51,   42,   52,   75,   44,   43,   45,   44,   47,   46,
       43,  189,   45,   77,   48,   47,   78,   45,   46,   49,
       79,   81,   49,   50,   77,   51,   50,   52,   75,   48,
       49,   71,   71,   49,   52,   78,   79,   71,   77,   80,
       81,   78,   82,   83,   51,   79,   81,   84,   52,   85,
       84,   86,   87,   80,   88,   89,  188,  187,   90,   94,
       91,   82,   93,   71,   80,   92,  186,   82,   83,  158,

      156,  155,   84,   95,   85,   97,   86,   87,   96,   88,
       89,   85,   83,   90,   94,   91,   98,   93,   87,  154,
       92,   86,   99,   89,   91,   88,   94,   92,   95,  100,
       97,   90,  101,   96,   93,  153,  102,  120,  123,  122,
      123,   98,  125,  152,   97,  122,   95,   99,  151,   96,
       98,  150,  124,  125,  100,  126,  128,  101,  100,  130,
       99,  102,  120,  123,  122,  126,  127,  125,  127,  131,
      129,  124,  132,  101,  149,  136,  102,  124,  148,  118,
      126,  128,  129,  133,  130,  134,  140,  135,  117,  115,
      114,  127,  137,  113,  131,  129,  138,  132,  111,  128,

      136,  139,  110,  132,  130,  131,  141,  142,  133,  109,
      134,  140,  135,  133,  132,  135,  143,  137,  136,  144,
      145,  138,  146,  134,  147,  108,  139,  140,  157,  137,
      139,  141,  142,  159,  141,  162,  166,  160,  159,  138,
      160,  143,  166,  164,  144,  145,  164,  146,  145,  147,
      142,  163,  144,  157,  143,  161,  147,  161,  159,  146,
      162,  166,  160,  165,  163,  167,  168,  169,  164,  165,
      107,  170,  171,  172,  175,  106,  163,  173,  165,  174,
      161,  105,  176,  177,  178,  179,  180,  104,  165,  181,
      167,  168,  169,  182,  103,  169,  170,  171,  172,  175,

      168,  183,  173,  170,  174,  184,  175,  176,  177,  178,
      179,  180,  178,  172,  181,  177,  171,  185,  182,  173,
      192,  174,  179,  193,  194,  182,  183,  197,  180,  196,
      184,  195,  181,  193,  195,  196,  194,  198,  201,  197,
      199,  183,  185,  200,  202,  192,  203,  200,  193,  194,
      204,  205,  197,   76,  196,   74,  195,  207,  206,   72,
      208,  209,  198,  201,   69,  199,   66,   65,  201,  202,
      210,  203,  200,   64,  211,  204,  205,   62,  198,  205,
      199,  212,  207,  206,  204,  208,  209,  202,  213,  203,
      206,  207,  206,  214,  215,  210,  223,  218,  208,  211,

      220,  219,  209,  224,  221,  222,  212,  219,  210,  221,
      226,  222,  220,  213,  227,  212,  218,   56,  214,  215,
      228,  223,  218,  229,  230,  220,  219,  231,  224,  221,
      222,  232,  233,   29,  215,  226,  235,  223,  234,  227,
      236,   28,  227,  237,  238,  228,  224,  239,  229,  230,
      240,  243,  231,   27,   23,  244,  232,  233,  230,  245,
      247,  235,  249,  234,  242,  236,  229,  248,  237,  238,
      231,  241,  239,  236,  242,  240,  243,  241,  232,  233,
      244,  234,  250,  251,  245,  247,  252,  249,  253,  242,
      237,  254,  248,  245,  244,  255,  241,  256,  248,  258,

      257,  259,    0,  249,  261,  262,  263,  250,  251,  264,
      265,  252,  266,  253,  267,  251,  254,  268,  252,  257,
      255,  269,  256,  254,  258,  257,  259,  255,  271,  261,
      262,  263,  272,    0,  264,  265,  261,  266,  259,  267,
      258,  274,  268,  275,  277,  278,  269,  282,  280,  283,
        0,    0,  285,  271,    0,  269,  286,  272,  271,    0,
      288,    0,    0,  280,  289,    0,  274,  280,  275,  277,
      278,  291,  282,  280,  283,  275,  274,  285,    0,  272,
      296,  286,  295,  293,  286,  288,  278,  282,  297,  289,
      283,  298,  299,  300,  289,  285,  291,  293,  301,  303,

      293,  293,  306,  291,  302,  296,  304,  295,  293,    0,
      295,    0,  296,  297,  305,  301,  298,  299,  300,  307,
      297,    0,  302,  301,  303,  299,  309,  306,  310,  302,
      308,  304,  311,  312,  298,  306,  300,    0,  304,  305,
        0,    0,    0,    0,  307,    0,  305,    0,  308,    0,
        0,  309,    0,  310,    0,  308,    0,  311,  312,    0,
      310,    0,  307,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  311,  314,  314,  314,  314,
      315,  315,  315,  315,  316,  316,  316,  316,  317,  317,
      317,  317,  318,  318,  318,  320,  320,  320,  322,  322,

      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
      313,  313,  313,  313,  313,  313,  313,  313,  313
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[49] =
    {   0,
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int mdl__flex_debug;
int mdl__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *mdl_text;
#line 1 "scan_mdl.l"
/* -*-c-*- */
#line 4 "scan_mdl.l"
/*
 * scan_mdl.l - scanner for an IC-CAP MDL data file
 *
 * Copyright (C) 2006 Stefan Jahn <stefan@lkcc.org>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.  
 *
 * $Id$
 *
 */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "check_mdl.h"
#include "tokens_mdl.h"

#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif



#line 871 "scan_mdl.cpp"

#define INITIAL 0
#define VERSION 1
#define BLKEDIT 2
#define BLKEDIT1 3
#define CIRCUIT 4
#define CIRCUIT1 5
#define PLINK 6
#define PLIST 7
#define PMEMBER 8
#define TABDATA 9
#define TABDATA1 10

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int mdl_lex_destroy (void );

int mdl_get_debug (void );

void mdl_set_debug (int debug_flag  );

YY_EXTRA_TYPE mdl_get_extra (void );

void mdl_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *mdl_get_in (void );

void mdl_set_in  (FILE * in_str  );

FILE *mdl_get_out (void );

void mdl_set_out  (FILE * out_str  );

int mdl_get_leng (void );

char *mdl_get_text (void );

int mdl_get_lineno (void );

void mdl_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int mdl_wrap (void );
#else
extern int mdl_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( mdl_text, mdl_leng, 1, mdl_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( mdl_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( mdl_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, mdl_in))==0 && ferror(mdl_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(mdl_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int mdl_lex (void);

#define YY_DECL int mdl_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after mdl_text and mdl_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( mdl_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(mdl_text[mdl_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 72 "scan_mdl.l"


#line 1064 "scan_mdl.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! mdl_in )
			mdl_in = stdin;

		if ( ! mdl_out )
			mdl_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			mdl_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				mdl__create_buffer(mdl_in,YY_BUF_SIZE );
		}

		mdl__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of mdl_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 314 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 901 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < mdl_leng; ++yyl )
				if ( mdl_text[yyl] == '\n' )
					   
    mdl_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 74 "scan_mdl.l"
{
  BEGIN(PLINK);
  return LINK;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 79 "scan_mdl.l"
{
  mdl_lval.ident = strdup (mdl_text);
  BEGIN(INITIAL);
  return t_LINK;
}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 85 "scan_mdl.l"
{
  mdl_text[strlen (mdl_text) - 1] = '\0';
  mdl_text[0] = '\0';
  mdl_lval.ident = strdup (&mdl_text[1]);
  return String;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "scan_mdl.l"
{
  return t_VIEW;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 96 "scan_mdl.l"
{
  return t_TABLE;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 100 "scan_mdl.l"
{
  BEGIN(TABDATA);
  return t_TABLE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 105 "scan_mdl.l"
{
  return t_PSTABLE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 109 "scan_mdl.l"
{
  BEGIN(BLKEDIT);
  return t_BLKEDIT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 114 "scan_mdl.l"
{
  return t_CNTABLE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 118 "scan_mdl.l"
{
  return t_OPTIMEDIT;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 122 "scan_mdl.l"
{
  return t_HYPTABLE;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 126 "scan_mdl.l"
{
  return t_ELEMENT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 130 "scan_mdl.l"
{
  return t_DATA;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 134 "scan_mdl.l"
{
  return t_DATASET;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 138 "scan_mdl.l"
{
  return t_DATASIZE;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 142 "scan_mdl.l"
{
  return t_POINT;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 146 "scan_mdl.l"
{
  BEGIN(PMEMBER);
  return t_MEMBER;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 151 "scan_mdl.l"
{
  BEGIN(PLIST);
  return t_LIST;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "scan_mdl.l"
{
  return t_PLOTOPTIMIZEROPT;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 160 "scan_mdl.l"
{
  return t_PLOTOPTIMIZERTRACESET;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 164 "scan_mdl.l"
{
  return t_PLOTOPTIMIZERTRACEREGSET;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 168 "scan_mdl.l"
{
  return t_PLOTOPTIMIZERTRACENATREGSET;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 172 "scan_mdl.l"
{
  return t_PLOTERROR;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 176 "scan_mdl.l"
{
  return t_TYPE;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 180 "scan_mdl.l"
{
  return t_EDITSIZE;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 184 "scan_mdl.l"
{
  return t_PLOTSIZE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 188 "scan_mdl.l"
{
  return t_OPTRANGE;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 192 "scan_mdl.l"
{
  return t_PARAM;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 196 "scan_mdl.l"
{
  return t_RANGE;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 200 "scan_mdl.l"
{
  return t_TERM;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 204 "scan_mdl.l"
{
  return t_CALSET;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 208 "scan_mdl.l"
{
  return t_CALDATA;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 212 "scan_mdl.l"
{
  return t_APPLIC;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 216 "scan_mdl.l"
{
  return t_SUBAPP;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 220 "scan_mdl.l"
{
  return t_CONNPAIR;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 224 "scan_mdl.l"
{
  BEGIN(CIRCUIT);
  return t_CIRCUITDECK;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 229 "scan_mdl.l"
{ /* identify float */
  mdl_lval.f = strtod (mdl_text, NULL);
  return Real;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 234 "scan_mdl.l"
{
  mdl_lval.ident = strdup (mdl_text);
  return Identifier;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 239 "scan_mdl.l"
{ BEGIN(BLKEDIT1); return '{'; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 240 "scan_mdl.l"
{ BEGIN(CIRCUIT1); return '{'; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 241 "scan_mdl.l"
{ BEGIN(TABDATA1); return '{'; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "scan_mdl.l"
{ /* pass the '{' to the parser */ return '{'; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 244 "scan_mdl.l"
{ /* pass the '{' to the parser */ return '}'; }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 246 "scan_mdl.l"
{ /* skip end of line and spaces */ }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 248 "scan_mdl.l"
{ BEGIN(INITIAL); return '}'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 249 "scan_mdl.l"
{ /* ignore */ }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 251 "scan_mdl.l"
{ /* any other character is invalid */
  fprintf (stderr, 
	   "line %d: syntax error, unrecognized character: `%s'\n", 
	   mdl_lineno, mdl_text);
  return InvalidCharacter;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 258 "scan_mdl.l"
ECHO;
	YY_BREAK
#line 1494 "scan_mdl.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(VERSION):
case YY_STATE_EOF(BLKEDIT):
case YY_STATE_EOF(BLKEDIT1):
case YY_STATE_EOF(CIRCUIT):
case YY_STATE_EOF(CIRCUIT1):
case YY_STATE_EOF(PLINK):
case YY_STATE_EOF(PLIST):
case YY_STATE_EOF(PMEMBER):
case YY_STATE_EOF(TABDATA):
case YY_STATE_EOF(TABDATA1):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed mdl_in at a new source and called
			 * mdl_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = mdl_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( mdl_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * mdl_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of mdl_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					mdl_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			mdl_restart(mdl_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) mdl_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 314 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 314 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 313);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					mdl_restart(mdl_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( mdl_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve mdl_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    mdl_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void mdl_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        mdl_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            mdl__create_buffer(mdl_in,YY_BUF_SIZE );
	}

	mdl__init_buffer(YY_CURRENT_BUFFER,input_file );
	mdl__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void mdl__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		mdl_pop_buffer_state();
	 *		mdl_push_buffer_state(new_buffer);
     */
	mdl_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	mdl__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (mdl_wrap()) processing, but the only time this flag
	 * is looked at is after mdl_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void mdl__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	mdl_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE mdl__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) mdl_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mdl__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) mdl_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in mdl__create_buffer()" );

	b->yy_is_our_buffer = 1;

	mdl__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with mdl__create_buffer()
 * 
 */
    void mdl__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		mdl_free((void *) b->yy_ch_buf  );

	mdl_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a mdl_restart() or at EOF.
 */
    static void mdl__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	mdl__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then mdl__init_buffer was _probably_
     * called from mdl_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void mdl__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		mdl__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void mdl_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	mdl_ensure_buffer_stack();

	/* This block is copied from mdl__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from mdl__switch_to_buffer. */
	mdl__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void mdl_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	mdl__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		mdl__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void mdl_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)mdl_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mdl_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)mdl_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in mdl_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE mdl__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) mdl_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in mdl__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	mdl__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to mdl_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       mdl__scan_bytes() instead.
 */
YY_BUFFER_STATE mdl__scan_string (yyconst char * yystr )
{
    
	return mdl__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to mdl_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE mdl__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) mdl_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in mdl__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = mdl__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in mdl__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up mdl_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		mdl_text[mdl_leng] = (yy_hold_char); \
		(yy_c_buf_p) = mdl_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		mdl_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int mdl_get_lineno  (void)
{
        
    return mdl_lineno;
}

/** Get the input stream.
 * 
 */
FILE *mdl_get_in  (void)
{
        return mdl_in;
}

/** Get the output stream.
 * 
 */
FILE *mdl_get_out  (void)
{
        return mdl_out;
}

/** Get the length of the current token.
 * 
 */
int mdl_get_leng  (void)
{
        return mdl_leng;
}

/** Get the current token.
 * 
 */

char *mdl_get_text  (void)
{
        return mdl_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void mdl_set_lineno (int  line_number )
{
    
    mdl_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see mdl__switch_to_buffer
 */
void mdl_set_in (FILE *  in_str )
{
        mdl_in = in_str ;
}

void mdl_set_out (FILE *  out_str )
{
        mdl_out = out_str ;
}

int mdl_get_debug  (void)
{
        return mdl__flex_debug;
}

void mdl_set_debug (int  bdebug )
{
        mdl__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from mdl_lex_destroy(), so don't allocate here.
     */

    /* We do not touch mdl_lineno unless the option is enabled. */
    mdl_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    mdl_in = stdin;
    mdl_out = stdout;
#else
    mdl_in = (FILE *) 0;
    mdl_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * mdl_lex_init()
     */
    return 0;
}

/* mdl_lex_destroy is for both reentrant and non-reentrant scanners. */
int mdl_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		mdl__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		mdl_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	mdl_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * mdl_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *mdl_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *mdl_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void mdl_free (void * ptr )
{
	free( (char *) ptr );	/* see mdl_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 258 "scan_mdl.l"



