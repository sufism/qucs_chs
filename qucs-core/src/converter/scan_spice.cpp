#line 2 "scan_spice.cpp"

#line 4 "scan_spice.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer spice__create_buffer
#define yy_delete_buffer spice__delete_buffer
#define yy_flex_debug spice__flex_debug
#define yy_init_buffer spice__init_buffer
#define yy_flush_buffer spice__flush_buffer
#define yy_load_buffer_state spice__load_buffer_state
#define yy_switch_to_buffer spice__switch_to_buffer
#define yyin spice_in
#define yyleng spice_leng
#define yylex spice_lex
#define yylineno spice_lineno
#define yyout spice_out
#define yyrestart spice_restart
#define yytext spice_text
#define yywrap spice_wrap
#define yyalloc spice_alloc
#define yyrealloc spice_realloc
#define yyfree spice_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE spice_restart(spice_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int spice_leng;

extern FILE *spice_in, *spice_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE spice_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-spice_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < spice_leng; ++yyl )\
                    if ( spice_text[yyl] == '\n' )\
                        --spice_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up spice_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up spice_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via spice_restart()), so that the user can continue scanning by
	 * just pointing spice_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when spice_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int spice_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow spice_wrap()'s to do buffer switches
 * instead of setting up a fresh spice_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void spice_restart (FILE *input_file  );
void spice__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE spice__create_buffer (FILE *file,int size  );
void spice__delete_buffer (YY_BUFFER_STATE b  );
void spice__flush_buffer (YY_BUFFER_STATE b  );
void spice_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void spice_pop_buffer_state (void );

static void spice_ensure_buffer_stack (void );
static void spice__load_buffer_state (void );
static void spice__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER spice__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE spice__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE spice__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE spice__scan_bytes (yyconst char *bytes,int len  );

void *spice_alloc (yy_size_t  );
void *spice_realloc (void *,yy_size_t  );
void spice_free (void *  );

#define yy_new_buffer spice__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        spice_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            spice__create_buffer(spice_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        spice_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            spice__create_buffer(spice_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define spice_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *spice_in = (FILE *) 0, *spice_out = (FILE *) 0;

typedef int yy_state_type;

extern int spice_lineno;

int spice_lineno = 1;

extern char *spice_text;
#define yytext_ptr spice_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up spice_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	spice_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 92
#define YY_END_OF_BUFFER 93
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[637] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   93,   90,   84,   92,   90,    9,
        4,   90,    2,    3,   90,   90,   17,   12,   15,   16,
       14,   13,   19,   22,   20,   21,   23,   18,   86,   84,
       85,   86,   83,   90,   82,   82,   90,   71,   90,   82,
       82,   82,   61,   82,   82,   82,   82,   82,   82,   56,
       77,   77,   77,   77,   55,   55,   77,   77,   77,   77,

       77,   90,   71,   64,   79,   77,   76,   76,   77,   77,
       77,   76,   77,   77,   77,   87,   84,   87,    4,   82,
       82,   82,   48,   82,   82,   62,   82,   90,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,    2,    3,   90,   17,   12,   65,   15,   16,   14,
       67,   13,   12,   68,   19,   66,   12,   22,   20,   21,
       14,   23,   18,   69,   57,   71,   77,   60,    6,    6,
        7,    6,    4,    6,   82,   82,   82,   82,   82,   89,
       84,   88,   89,    4,   78,   77,   77,   60,    0,    0,
       84,    0,    2,    1,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,   17,   17,
       12,   12,   15,   15,   16,   16,   14,   14,   13,   13,
       19,   19,   22,   22,   20,   20,   21,   21,   23,   23,
       18,   18,   85,    0,   83,    0,   82,    0,   72,   72,
       72,   71,   72,   82,   72,   72,   82,    0,   63,   82,
       82,   82,   82,   61,   82,   82,   82,   82,   82,   63,
       82,   82,   82,   60,   60,   56,   77,   77,   55,   77,
       53,   77,   77,   77,   55,   77,   72,   71,   72,    0,
       72,   72,    0,   64,   79,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   76,   77,   77,   75,   82,   48,

       63,   82,   77,   77,   77,   77,   77,   77,   77,   77,
       47,   77,   77,   77,   77,   77,    2,    0,   17,   17,
       12,   12,   65,   15,   16,   14,   67,   13,   13,   12,
       68,   19,   19,   66,   66,   22,   22,   20,   20,   21,
       14,   23,   18,   69,   69,   71,   52,   60,    7,    0,
        0,   82,   82,   82,   82,   82,   88,    0,   78,   77,
       50,   60,   60,    0,   27,    0,   31,    0,    0,   30,
        0,    0,    0,   32,    0,    0,   41,    0,    0,    0,
        0,   44,    0,    0,    0,   82,   72,   82,   82,   72,
       82,   82,    0,    0,   49,   82,   75,   82,   82,   82,

       82,   77,   51,   77,   77,    0,   72,    0,    0,   72,
        0,    0,   77,   76,   76,   77,   77,   76,   77,   82,
       82,   77,   77,   46,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,    0,   17,   12,   13,
       12,   19,   66,   22,   20,   20,   14,   47,    0,   82,
       82,   82,   82,   82,   77,   60,   70,    0,    0,    0,
        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   72,   82,    0,   82,   82,   82,
       82,   77,   77,   54,    0,   77,   82,   82,   58,   77,
       77,   77,   58,   77,   77,   77,   58,   77,   77,   77,

       77,   70,   17,   13,   12,   19,   66,   22,   20,   20,
        0,   74,   82,   73,   82,   82,   73,   60,   70,   70,
        0,    0,    0,   45,    0,    0,    0,    0,    0,   26,
        0,   42,   43,    0,   33,   25,    0,    0,   81,   63,
       82,   77,   77,   82,   77,   77,   77,   77,   77,   77,
       77,   77,   11,   17,   13,   66,   22,   20,   20,    8,
       82,   60,    0,   28,    0,   24,    0,   39,    0,   34,
        0,   38,   82,   82,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   17,   13,   66,   22,   20,   82,    0,
        0,    0,   37,   10,   82,   58,   77,   77,   59,   77,

       77,   77,   17,   13,   66,   22,   20,    5,   40,   29,
       35,   80,   77,   77,   77,   77,   77,   13,   66,   22,
       20,   77,   77,   77,   13,   66,   22,   20,   77,   13,
       59,   20,   77,   20,   20,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    2,    1,    1,    6,    7,    1,    1,    1,    8,
        8,    9,   10,    8,   11,   12,   13,   14,   15,   15,
       16,   14,   14,   14,   14,   14,   14,   17,   18,    1,
        8,    1,    1,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   17,   47,    1,   48,    1,   20,   21,   22,   23,

       49,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   50,   40,   41,   42,   43,
       44,   45,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    2,    2,    2,    1,    3,    1,    2,    2,    4,
        5,    6,    7,    8,    8,    8,    6,    2,    1,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   10,   11,   12,    9,    9
    } ;

static yyconst flex_int16_t yy_base[741] =
    {   0,
        0,   12,   61,   64,   72,    0,  122,    0,  171,    0,
      202,  249,  296,    0,  186,  220,  328,  360,  410,  457,
      485,  515,  560,  610,  642,    0,  683,    0, 1581, 1580,
      228,  267,  327,  350,  236,  278,  733,  780,  818,  850,
      882,    0,  399,  400, 1616, 3683, 3683,  188,    7, 3683,
     3683,  152,  214,   67,  913,  193,  962, 1009, 1056, 1103,
     1150, 1197, 1244, 1291, 1338, 1385, 1432, 1479, 3683, 3683,
      274,  196,  350,  222,    0,  276,  249, 1522,    0,  211,
      348, 1569,  283, 1583, 1572, 1576,  342, 1569, 1556, 1567,
      472,  392,  473,  467,  438,  478,  488,  486,  518,  534,

      798,  392, 1593,    0,    0,    0, 1546,    0,  233,  458,
      404,  325, 1541, 1539, 1536, 3683, 3683,  243, 3683, 1547,
      478,  315,    0,  328,  343,    0, 1523,  554,  508,  542,
      523,  658,  548,  695,  713,  760,  755,  800,  765,  743,
      825, 1533, 3683,  672,  749,  831,  790,  806,  845,  857,
      866,  875,  894,  900,  943,  976,  982,  990,  996, 1024,
     1032, 1038, 1065, 1073,    0,  431, 1075, 1081, 3683, 3683,
      563,  439, 3683,  483, 1488, 1504, 1488, 1497, 1490, 3683,
     3683,  675,  449, 3683,    0,  971,  921,  908,  754,  451,
     3683, 1470,  468, 3683,  571,  581, 1471, 1455,  364, 1450,

      493, 1445, 1444, 1441,  514,  833, 1093, 1443, 1642,    0,
     1689,    0, 1736,    0, 1783,    0, 1830,    0, 1877,    0,
     1924,    0, 1971,    0, 2018,    0, 2065,    0, 2112,    0,
     2159,    0,  898,  583,  957,  603,    0,  716, 2202, 2239,
      488,  809,    0, 1113, 1106,  970, 1442, 1421,    0, 1434,
     1440, 1423, 1421,  598, 1422, 1420,  550, 1415, 1411,    0,
     1406, 1417, 1411,  919, 1092, 1044,  877,    0, 1018, 1026,
     1083, 1126, 1135, 1163, 1164, 1165, 1167,  943, 3683, 1174,
     1193, 2270, 1399,    0,    0, 1379, 1378, 1389,  339, 1376,
     1383,  369, 1366, 1361,    0, 1373, 1350,    0, 1352,    0,

        0, 1344, 1211, 1213, 1222, 1257, 1231, 1266, 1272, 1274,
     1258, 1304, 1313, 1315, 1323, 1321, 1373, 1336, 1354, 1360,
     1366, 1394, 1400, 1406, 1412, 1441, 1447, 1453, 1462, 1488,
     1494, 1502, 1590, 1508, 1569, 1575, 1655, 1581, 1661, 1667,
     1702, 1673, 1708, 1714, 1745, 1178, 1368, 1751, 1162,  686,
     1335,  493, 1328, 1330, 1336, 1322, 1192,  706,    0, 1464,
     1414, 1232, 1604, 1325, 3683, 1312, 3683, 1305, 1298, 3683,
     1315, 1309,  644,  624, 1296, 1290, 3683, 1275, 1282, 1292,
     1275, 3683, 1276, 1260, 1720, 1259, 1753, 1250, 1240, 1231,
     1229, 1226, 1208,    0,    0,  663,    0, 1213, 1211, 1207,

     1202, 1753, 1496, 1716, 1768, 1414, 1756, 1203, 1203, 1188,
     1176, 1172, 1137,    0,    0, 1108, 1105,    0, 1109,  724,
      768, 1801, 1803, 1510, 1802, 1811, 1812, 1843, 1853, 1862,
     1817, 1852, 1887, 1863, 1898, 1864, 1111, 1906, 1933, 1941,
     1947, 1953, 1988, 1997, 2027, 2003, 2033, 2039, 1096, 1063,
     1051, 1036, 1032, 1016, 2041, 1280, 1527,  770,  804, 1016,
     1015,  723,  791, 1003,  995,  830,  971,  871,  961,  963,
      941,  939,  876, 1525, 1622,  908,  893,  878,  920,  959,
      889, 1955, 2049, 2051,  869,  900,  855,  841, 2074, 2083,
     2085, 2093, 2084, 2099, 2121, 2122, 2094, 2127, 2133, 2135,

     2146, 1685, 2168, 2176, 2182, 2188, 2290, 2299, 2310, 2316,
      826,    0,  825,    0, 1028, 1046, 2190, 2275, 1654,  724,
      987,  777,  742, 3683,  727,  723,  674, 1086,  670, 3683,
      975, 3683, 3683,  670, 3683, 3683,  657,  622, 3683,  554,
      544, 2322,  549,  532, 2327, 2328, 2333, 2345, 2347, 2358,
     2339, 2360, 3683, 2368, 2379, 2387, 2397, 2405, 2411, 3683,
      459, 1374,  398, 3683,  403, 3683, 1101, 3683,  390, 3683,
     1022, 3683,  394,  374, 2389,  363, 2413, 2421, 2422, 2430,
     2431, 2432, 2440, 2441, 2450, 2462, 2473, 2479, 1131,  242,
     1162, 1051,  203, 3683,  207, 2452, 2481, 2487, 2489, 2498,

     2497, 2510, 2518, 2524, 2530, 2538, 2549, 3683, 3683, 3683,
     3683,    0, 2540, 2557, 2558, 2563, 2572, 2580, 2586, 2598,
     2604, 2588, 2606, 2614, 2615, 2625, 2634, 2644, 2646, 2652,
     2660, 2666, 2668, 2674, 2680, 3683, 2724, 2736, 2748, 2760,
     2772, 2784, 2796, 2808, 2819, 2827, 2838, 2849, 2860, 2871,
     2882, 2893, 2904, 2915, 2926, 2937, 2948, 2958,  175, 2968,
     2978, 2988, 2993, 3001, 3009, 3016, 3026, 3036, 3046, 3056,
     3066, 3076, 3086, 3096, 3106, 3116, 3126, 3136, 3146, 3156,
     3166, 3176, 3186, 3196, 3204, 3214, 3225, 3233, 3238, 3249,
     3254, 3265, 3270, 3281, 3286, 3297, 3302, 3313, 3318, 3329,

     3334, 3345, 3350, 3361, 3366, 3377, 3382, 3393, 3398, 3409,
     3414, 3419, 3429, 3439, 3447, 3452, 3460, 3467, 3477, 3487,
     3497, 3507, 3517, 3527, 3537, 3547, 3557, 3567, 3577, 3587,
     3597, 3607, 3617, 3627, 3637, 3647, 3655, 3665,  168, 3670
    } ;

static yyconst flex_int16_t yy_def[741] =
    {   0,
      637,  636,  638,  638,  636,    5,  636,    7,  637,    9,
      639,  639,  636,   13,  640,  640,    5,    5,  641,  641,
        5,    5,    7,  636,    5,   25,    7,   27,   27,   27,
      642,  642,   25,   25,  643,  643,  644,  644,   27,   27,
       27,   41,   25,   25,  636,  636,  636,  636,  636,  636,
      636,  636,  645,  645,  636,  645,  646,  647,  648,  649,
      650,  651,  652,  653,  654,  655,  656,  657,  636,  636,
      636,  636,  636,  636,  658,  658,  636,  636,  659,  658,
      658,  658,  660,  658,  658,  658,  658,  658,  658,  661,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  636,  636,  663,  664,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  665,  636,  636,  636,  636,  658,
      658,  658,  666,  658,  658,  658,  658,  636,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  636,  636,   55,  667,  668,  669,  670,  671,  672,
      673,  674,  668,  675,  676,  677,  668,  678,  679,  680,
      672,  681,  682,  683,  658,  658,  662,  684,  636,  636,
      636,  636,  636,  636,  658,  658,  658,  658,  658,  636,
      636,  636,  636,  636,  685,  662,  662,  686,  636,  636,
      636,  636,  687,  636,  636,  687,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  688,  689,
      690,  691,  692,  693,  694,  695,  696,  697,  698,  699,
      700,  701,  702,  703,  704,  705,  706,  707,  708,  709,
      710,  711,  636,  636,  636,  636,  658,  636,  636,  636,
      240,  239,  658,  658,  658,  245,  658,  712,  658,  658,
      658,  658,  658,  713,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  714,  714,  714,  662,  715,  662,  662,
      662,  662,  662,  662,  662,  662,  240,  277,  636,  636,
      636,  636,  636,  716,  717,  715,  715,  715,  715,  715,
      715,  715,  715,  715,  715,  715,  715,  658,  658,  718,

      658,  658,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  636,  636,  719,  719,
      720,  720,  721,  722,  723,  724,  725,  726,  726,  720,
      727,  728,  728,  729,  729,  730,  730,  731,  731,  732,
      724,  733,  734,  735,  735,  658,  662,  736,  636,  636,
      636,  658,  658,  658,  658,  658,  636,  636,  737,  662,
      662,  738,  738,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  658,  239,  658,  658,  658,
      658,  658,  712,  739,  658,  658,  658,  658,  658,  658,

      658,  662,  662,  662,  662,  636,  240,  636,  636,  636,
      636,  636,  715,  715,  715,  715,  715,  715,  715,  658,
      658,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  636,  719,  720,  726,
      720,  728,  729,  730,  731,  731,  724,  735,  636,  658,
      658,  658,  658,  658,  662,  738,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  407,  658,  740,  658,  658,  658,
      658,  662,  662,  662,  636,  715,  658,  658,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,

      662,  636,  719,  726,  720,  728,  729,  730,  731,  731,
      636,  658,  658,  658,  658,  658,  662,  738,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  740,  636,  658,
      658,  662,  715,  658,  662,  662,  662,  662,  662,  662,
      662,  662,  636,  719,  726,  729,  730,  731,  731,  636,
      658,  738,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  658,  658,  662,  715,  662,  662,  662,  662,
      662,  662,  662,  719,  726,  729,  730,  731,  658,  636,
      636,  636,  636,  636,  658,  662,  662,  662,  662,  662,

      662,  662,  719,  726,  729,  730,  731,  636,  636,  636,
      636,  658,  662,  662,  662,  662,  662,  726,  729,  730,
      731,  662,  662,  662,  726,  729,  730,  731,  662,  726,
      729,  731,  662,  731,  731,    0,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636
    } ;

static yyconst flex_int16_t yy_nxt[3734] =
    {   0,
      636,   47,   48,   49,   50,  636,   51,   47,   51,  189,
      190,   52,   46,   53,   48,   49,   50,   46,   51,   47,
       54,   46,   46,   55,   46,   56,   56,   56,   46,   46,
       46,   56,   57,   58,   56,   59,   60,   59,   60,   61,
       56,   62,   58,   56,   56,   63,   56,   56,   58,   64,
       65,   66,   61,   67,   68,   56,   56,   46,   46,   46,
       59,   65,   70,   71,   72,   70,   71,   72,   70,  194,
      195,   70,   46,   47,   73,   74,   46,   75,   51,   47,
       51,   76,   76,   77,   46,   78,   78,   78,   46,   46,
       79,   80,   75,   75,   81,   82,   75,   75,   75,   83,

       75,   75,   84,   75,   85,   86,   87,   75,   75,   88,
       89,   75,   90,   75,   75,   75,   75,   46,   46,   75,
       82,   89,   46,   47,   73,   74,   46,   75,   51,   47,
       51,   76,   76,   77,   46,   78,   78,   78,   46,   46,
       46,   91,   92,   92,   93,   92,   92,   92,   92,   94,
       92,   92,   95,   96,   97,   98,   99,   92,  100,   92,
      101,   92,   92,   95,   92,   92,   92,   46,   46,   92,
       92,  101,   47,   73,   74,  192,  477,   51,   47,   51,
      102,  102,   77,  248,  103,  103,  103,  117,   73,  118,
      189,  190,  119,  117,  119,  194,  195,  191,  233,  234,

      192,  104,   46,   47,   48,   49,   46,   46,   51,   47,
       51,   46,   46,   46,   46,  193,  194,  195,   46,   46,
       46,  117,   73,  118,  235,  236,  119,  117,  119,  170,
      171,  172,  249,  612,  173,  170,  173,  181,  182,  183,
      611,  250,  184,  181,  184,  235,  236,   46,   46,   46,
       47,   48,   49,   46,   46,   51,   47,   51,   46,   46,
       46,   46,  240,  240,  240,   46,   46,   46,  170,  171,
      172,  287,  608,  173,  170,  173,  189,  190,  174,  181,
      182,  183,  287,  191,  184,  181,  184,  238,  237,  239,
      239,  239,  237,  237,   46,   46,   46,   47,   48,   49,

       46,   46,   51,   47,   51,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,  106,  106,  107,  108,  106,
      106,  106,  106,  106,  106,  106,  109,  106,  110,  106,
      111,  106,  112,  113,  106,  114,  115,  106,  106,  106,
      106,   46,   46,  106,  106,  106,   46,  120,  294,  301,
      121,  175,  189,  190,  258,   75,  259,  176,  250,  191,
       75,  177,  122,  415,  301,  178,   75,  179,   75,  249,
      302,  251,  416,  294,  175,  252,  178,   75,   46,  120,
      176,  258,  121,  259,  177,  367,  260,   75,  178,  418,
      179,  368,   75,  415,  122,  595,  251,  237,   75,  178,

       75,  237,  417,  238,  268,  277,  277,  277,  298,   75,
       46,   47,   73,   74,   46,   46,   51,   47,   51,   46,
       46,   46,  593,  175,  175,  591,   46,   46,   46,  176,
      176,  590,  291,  177,  177,  292,  293,  178,  178,  188,
      188,  349,  350,  237,  346,  346,  346,  237,  178,  178,
      268,  357,  358,  189,  190,   46,   46,   46,   47,   73,
       74,   46,   46,   51,   47,   51,   46,   46,   46,  193,
      194,  195,  237,   46,   46,   46,  237,  237,  237,  268,
      589,  237,  237,  237,  268,  268,  288,  237,  271,  289,
      268,  237,  290,  237,  269,  237,  270,  237,  268,  298,

      268,  251,   46,   46,  124,  299,  351,  125,   75,  269,
      273,  636,  126,  237,  370,   75,  450,  237,   75,  127,
      268,  270,   75,  237,  272,  371,  251,  237,  237,  303,
      268,  351,  237,   75,  124,  268,  636,  125,   75,  237,
      269,  450,  126,  237,  375,   75,  268,  237,   75,  127,
      376,  237,   75,  237,  268,  269,  573,  237,  377,  274,
      268,  304,  305,   75,   50,  189,  190,  240,  240,  240,
      576,  128,  191,  194,  195,  307,  574,  192,  573,  129,
      130,  131,   92,  194,  195,  233,  234,   92,  298,  132,
      133,   92,  134,  135,  136,  137,   92,  138,  139,  298,

      140,   92,  192,  237,  141,  235,  236,  237,  237,  139,
       46,  142,   73,   74,   50,   75,   51,   47,  143,   76,
       76,  144,   46,   78,   78,   78,   46,   46,   46,  129,
      145,  146,  147,  148,  149,  148,  149,  150,  151,  152,
      153,  154,  134,  155,  136,  156,  157,  158,  159,  160,
      161,  162,  163,   92,  164,   46,   46,   92,  148,  159,
       46,   75,  465,  237,   75,   75,  463,  237,  539,   75,
      268,  464,   75,  465,   75,   75,   75,  189,  190,   75,
       75,  306,  165,  572,  191,  240,  240,  240,  349,  350,
       75,   75,   75,   75,   46,  318,  166,  166,  166,  571,

      237,  478,   92,  569,  237,   92,  306,  268,  357,  358,
       92,  567,  478,   92,   92,   92,  167,   92,  237,   92,
      318,   92,  237,  168,   92,  268,  520,  521,  308,  240,
      240,  240,   92,   46,   47,   73,   74,   46,   46,   51,
       47,   51,   46,   46,   46,   46,  526,  309,  237,   46,
       46,   46,  237,  566,  237,  268,  189,  190,  237,  267,
      237,  268,  487,  191,  237,  237,  565,  268,  320,  237,
      237,  526,  268,  487,  237,  564,  315,  268,   46,   46,
       46,   47,   73,   74,   46,   46,   51,   47,   51,   46,
       46,   46,   46,  310,  312,  237,   46,   46,   46,  237,

      267,  314,  268,  237,  311,  237,  488,  237,  522,  237,
      268,  237,  268,  563,  527,  237,  267,  488,  268,  522,
      275,  276,  242,  242,  242,   46,   46,   76,   76,   77,
      237,   78,   78,   78,  237,  275,  237,  268,  313,  527,
      237,  267,  523,  268,  561,   94,  276,  560,  316,  313,
      237,   92,  378,  523,  237,  267,  379,  268,   92,   76,
       76,   77,  237,   78,   78,   78,  237,  267,  530,  268,
      322,  237,  380,  316,  260,  237,  267,   94,  268,  530,
      237,  379,  237,   92,  237,  267,  237,  268,  544,  268,
       92,   76,   76,   77,  532,   78,   78,   78,  329,  237,

      189,  190,  279,  237,  267,  237,  268,  191,  541,  237,
      267,  540,  268,  237,  537,   92,  186,  237,  237,  532,
      187,  330,   92,  329,  263,  537,  237,  363,  237,  237,
      237,  187,  197,  268,  198,  199,  192,  200,  543,  539,
      201,  243,  361,  301,  202,  203,  204,  205,  237,  543,
      206,  207,  237,  267,  208,  268,  278,  278,  278,  189,
      190,  192,  207,  196,  194,  195,  191,  196,  301,  196,
      196,  536,  196,  196,  196,  535,  237,  333,  196,  196,
      237,  237,  397,  268,  534,  237,  267,  237,  268,  520,
      521,  237,  267,  389,  268,  237,  390,  391,  533,  237,

      267,  237,  268,  531,  360,  237,  267,  397,  268,  210,
      196,  194,  195,  570,  196,  335,  196,  196,  389,  196,
      196,  196,  529,  237,  570,  196,  196,  237,  337,  237,
      268,  237,  339,  237,  267,  237,  268,  237,  268,  337,
      528,  237,  267,  237,  268,  525,  402,  237,  267,  263,
      268,  512,  524,  237,  237,  516,  212,  196,  194,  195,
      594,  196,  515,  196,  196,  341,  196,  196,  196,  512,
      237,  594,  196,  196,  237,  267,  512,  268,  237,  514,
      237,  513,  237,  267,  237,  268,  237,  268,  237,  610,
      237,  267,  237,  268,  512,  268,  345,  263,  512,  273,

      610,  237,  237,  214,  196,  194,  195,  347,  196,  568,
      196,  196,  266,  196,  196,  196,  381,  382,  511,  196,
      196,  345,  386,  386,  592,  243,  387,  387,  387,  383,
      243,  237,  243,  502,  568,  237,  486,  388,  268,  247,
      237,  381,  415,  243,  237,  415,  243,  268,  269,  592,
      216,  196,  194,  195,  512,  196,  295,  196,  196,  403,
      196,  196,  196,  269,  189,  190,  196,  196,  237,  237,
      237,  191,  237,  237,  237,  268,  268,  268,  241,  512,
      277,  277,  277,  406,  406,  609,  404,  407,  407,  407,
      280,  346,  346,  346,  189,  190,  405,  218,  196,  194,

      195,  191,  196,  279,  196,  196,  281,  196,  196,  196,
      609,  404,  279,  196,  196,  280,  237,  279,  237,  279,
      237,  279,  237,  268,  408,  268,  283,  237,  281,  485,
      279,  237,  422,  279,  268,  423,  237,  237,  481,  301,
      237,  237,  237,  268,  220,  196,  194,  195,  480,  196,
      479,  196,  196,  394,  196,  196,  196,  243,  424,  245,
      196,  196,  237,  237,  243,  245,  237,  237,  426,  268,
      268,  237,  387,  387,  387,  237,  476,  237,  268,  237,
      425,  237,  473,  237,  268,  237,  268,  427,  428,  237,
      237,  222,  196,  194,  195,  472,  196,  429,  196,  196,

      430,  196,  196,  196,  311,  425,  471,  196,  196,  237,
      431,  432,  470,  237,  469,  468,  268,  467,  237,  518,
      237,  431,  237,  433,  237,  268,  237,  268,  237,  466,
      237,  462,  237,  268,  435,  268,  461,  460,  224,  196,
      194,  195,  459,  196,  458,  196,  196,  457,  196,  196,
      196,  434,  454,  424,  196,  196,  453,  311,  436,  237,
      452,  434,  451,  237,  267,  237,  268,  449,  437,  237,
      267,  237,  268,  237,  317,  237,  267,  237,  268,  237,
      268,  421,  438,  237,  237,  226,  196,  194,  195,  420,
      196,  419,  196,  196,  295,  196,  196,  196,  418,  237,

      414,  196,  196,  237,  267,  237,  268,  414,  414,  237,
      267,  237,  268,  414,  413,  237,  267,  237,  268,  237,
      295,  237,  267,  237,  268,  412,  268,  407,  407,  407,
      439,  401,  228,  196,  194,  195,  400,  196,  397,  196,
      196,  397,  196,  196,  196,  399,  237,  398,  196,  196,
      237,  267,  237,  268,  298,  397,  237,  267,  237,  268,
      396,  298,  237,  267,  395,  268,  394,  237,  392,  237,
      384,  237,  267,  237,  268,  374,  268,  373,  372,  230,
      196,  194,  195,  369,  196,  440,  196,  196,  366,  196,
      196,  196,  365,  237,  455,  196,  196,  237,  267,  237,

      268,  237,  364,  237,  267,  237,  268,  237,  268,  356,
      440,  237,  267,  237,  268,  237,  355,  237,  267,  237,
      268,  354,  268,  353,  352,  441,  232,  237,  519,  520,
      521,  237,  237,  241,  317,  242,  242,  242,  475,  475,
      475,  243,  237,  237,  237,  244,  245,  245,  243,  237,
      237,  245,  237,  246,  245,  247,  245,  237,  237,  243,
      245,  245,  243,  237,  237,  237,  237,  260,  298,  237,
      244,  245,  263,  297,  237,  296,  237,  237,  237,  267,
      237,  268,  295,  286,  237,  267,  237,  268,  443,  265,
      237,  267,  262,  268,  266,  237,  261,  257,  266,  237,

      267,  266,  268,  266,  241,  256,  278,  278,  278,  237,
      255,  253,  279,  237,  237,  636,  280,  281,  281,  279,
       92,   92,  281,  636,  282,  281,  283,  281,  442,  636,
      279,  281,  281,  279,  456,  475,  475,  475,  636,  442,
      636,  280,  281,  196,  194,  195,  636,  196,  636,  196,
      196,  636,  196,  196,  196,  519,  520,  521,  196,  196,
      237,  636,  636,  636,  237,  267,  237,  268,  636,  636,
      237,  267,  237,  268,  636,  636,  237,  267,  237,  268,
      445,  636,  237,  267,  636,  268,  519,  520,  521,  210,
      196,  194,  195,  444,  196,  636,  196,  196,  636,  196,

      196,  196,  636,  444,  446,  196,  196,  237,  636,  636,
      636,  237,  267,  237,  268,  636,  636,  237,  267,  237,
      268,  237,  553,  237,  267,  237,  268,  636,  268,  474,
      474,  636,  447,  475,  475,  475,  212,  196,  194,  195,
      636,  196,  636,  196,  196,  636,  196,  196,  196,  483,
      237,  636,  196,  196,  237,  267,  237,  268,  237,  636,
      237,  267,  237,  268,  636,  268,  387,  387,  387,  407,
      407,  407,  636,  237,  636,  636,  237,  237,  636,  636,
      268,  448,  636,  214,  196,  194,  195,  636,  196,  636,
      196,  196,  482,  196,  196,  196,  636,  636,  636,  196,

      196,  237,  484,  636,  636,  636,  237,  237,  237,  636,
      237,  237,  237,  268,  268,  268,  237,  237,  636,  636,
      237,  237,  237,  268,  268,  636,  237,  636,  636,  268,
      216,  196,  194,  195,  490,  196,  491,  196,  196,  489,
      196,  196,  196,  636,  636,  492,  196,  196,  237,  489,
      489,  636,  237,  636,  493,  268,  636,  237,  237,  636,
      489,  237,  237,  636,  268,  268,  493,  237,  237,  237,
      636,  237,  237,  237,  268,  268,  268,  218,  196,  194,
      195,  495,  196,  636,  196,  196,  494,  196,  196,  196,
      497,  493,  237,  196,  196,  636,  237,  499,  496,  268,

      636,  497,  501,  237,  636,  636,  636,  237,  636,  498,
      268,  237,  636,  501,  636,  237,  267,  636,  268,  636,
      636,  636,  636,  636,  220,  196,  194,  195,  636,  196,
      500,  196,  196,  636,  196,  196,  196,  503,  237,  636,
      196,  196,  237,  267,  636,  268,  237,  636,  636,  636,
      237,  267,  237,  268,  636,  636,  237,  267,  237,  268,
      237,  636,  237,  267,  237,  268,  636,  268,  636,  636,
      636,  222,  196,  194,  195,  504,  196,  636,  196,  196,
      269,  196,  196,  196,  636,  505,  636,  196,  196,  636,
      506,  636,  636,  237,  636,  636,  505,  237,  267,  636,

      268,  636,  237,  636,  636,  636,  237,  267,  237,  268,
      507,  636,  237,  267,  636,  268,  636,  636,  224,  196,
      194,  195,  636,  196,  636,  196,  196,  636,  196,  196,
      196,  508,  237,  636,  196,  196,  237,  267,  237,  268,
      636,  510,  237,  267,  237,  268,  237,  636,  237,  267,
      237,  268,  510,  268,  237,  636,  237,  636,  237,  509,
      237,  268,  636,  268,  636,  226,  196,  194,  195,  636,
      196,  636,  196,  196,  636,  196,  196,  196,  636,  237,
      542,  196,  196,  237,  517,  636,  268,  636,  237,  237,
      237,  636,  237,  237,  237,  268,  268,  268,  237,  237,

      636,  636,  237,  237,  237,  268,  268,  636,  237,  636,
      636,  268,  228,  196,  194,  195,  545,  196,  546,  196,
      196,  489,  196,  196,  196,  547,  237,  237,  196,  196,
      237,  237,  237,  268,  268,  636,  237,  636,  237,  268,
      237,  636,  237,  636,  237,  268,  548,  268,  636,  549,
      636,  237,  636,  636,  550,  237,  636,  636,  268,  230,
      196,  194,  195,  551,  196,  636,  196,  196,  636,  196,
      196,  196,  497,  237,  636,  196,  196,  237,  267,  552,
      268,  237,  636,  636,  636,  237,  267,  237,  268,  636,
      636,  237,  267,  237,  268,  237,  636,  237,  267,  237,

      268,  554,  268,  636,  636,  636,  232,  237,  636,  555,
      636,  237,  237,  241,  636,  239,  239,  239,  636,  636,
      636,  243,  237,  237,  237,  244,  245,  245,  243,  237,
      237,  245,  237,  246,  245,  247,  245,  237,  237,  243,
      245,  245,  243,  237,  237,  237,  237,  636,  636,  237,
      244,  245,  240,  240,  240,  636,  636,  636,  279,  636,
      636,  636,  385,  281,  281,  279,  636,  636,  281,  636,
      282,  281,  283,  281,  636,  636,  279,  281,  281,  279,
      237,  636,  636,  636,  237,  237,  636,  385,  281,  279,
      636,  636,  636,  409,  279,  237,  410,  411,  562,  237,

      267,  408,  268,  283,  237,  636,  636,  279,  237,  267,
      279,  268,  636,  636,  636,  237,  636,  556,  409,  237,
      267,  237,  268,  562,  636,  237,  267,  237,  268,  557,
      636,  237,  237,  237,  268,  636,  237,  237,  237,  268,
      268,  636,  237,  636,  237,  268,  636,  558,  237,  559,
      237,  268,  237,  636,  237,  575,  237,  268,  636,  268,
      636,  636,  578,  237,  577,  237,  582,  237,  493,  237,
      268,  579,  268,  237,  636,  636,  636,  237,  267,  580,
      268,  583,  579,  636,  237,  636,  636,  636,  237,  267,
      581,  268,  237,  493,  237,  636,  237,  267,  237,  268,

      636,  268,  237,  636,  636,  584,  237,  267,  636,  268,
      237,  275,  636,  585,  237,  267,  237,  268,  237,  586,
      237,  267,  237,  268,  587,  268,  237,  237,  596,  636,
      237,  237,  588,  268,  268,  237,  237,  237,  636,  237,
      237,  237,  268,  268,  268,  237,  237,  636,  597,  237,
      237,  267,  268,  268,  636,  237,  603,  237,  598,  237,
      267,  237,  268,  601,  268,  636,  636,  237,  599,  600,
      636,  237,  267,  602,  268,  636,  636,  604,  237,  599,
      600,  636,  237,  267,  237,  268,  237,  636,  237,  267,
      237,  268,  237,  268,  237,  636,  237,  636,  237,  268,

      605,  268,  237,  237,  606,  636,  237,  237,  636,  268,
      268,  605,  607,  613,  636,  237,  636,  636,  636,  237,
      614,  615,  268,  237,  616,  636,  636,  237,  267,  237,
      268,  636,  636,  237,  267,  237,  268,  636,  636,  237,
      267,  617,  268,  237,  636,  237,  615,  237,  267,  237,
      268,  636,  268,  619,  237,  636,  618,  636,  237,  267,
      636,  268,  237,  237,  622,  620,  237,  237,  237,  268,
      268,  636,  237,  636,  636,  268,  636,  237,  619,  636,
      621,  237,  636,  636,  268,  237,  636,  599,  636,  237,
      267,  237,  268,  237,  623,  237,  267,  237,  268,  636,

      268,  599,  636,  237,  625,  636,  624,  237,  267,  237,
      268,  237,  599,  237,  267,  237,  268,  636,  268,  237,
      237,  596,  626,  237,  237,  267,  268,  268,  636,  636,
      237,  636,  636,  629,  237,  267,  627,  268,  628,  237,
      599,  636,  636,  237,  267,  636,  268,  627,  630,  237,
      636,  237,  636,  237,  267,  237,  268,  237,  268,  631,
      636,  237,  267,  632,  268,  237,  636,  633,  636,  237,
      267,  237,  268,  237,  636,  237,  267,  237,  268,  237,
      268,  636,  636,  237,  267,  237,  268,  634,  636,  237,
      267,  636,  268,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  489,  636,  636,  636,
      636,  636,  635,  636,  636,  636,  636,  489,  636,  636,
      636,  636,  636,  635,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  169,  169,  169,  169,  169,  169,
      169,  169,  169,  169,  169,  169,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      196,  196,  636,  196,  196,  196,  196,  196,  209,  209,
      636,  209,  209,  209,  209,  209,  636,  636,  209,  211,
      211,  636,  211,  211,  211,  211,  211,  636,  636,  211,
      213,  213,  636,  213,  213,  213,  213,  213,  636,  636,
      213,  215,  215,  636,  215,  215,  215,  215,  215,  636,
      636,  215,  217,  217,  636,  217,  217,  217,  217,  217,
      636,  636,  217,  219,  219,  636,  219,  219,  219,  219,
      219,  636,  636,  219,  221,  221,  636,  221,  221,  221,

      221,  221,  636,  636,  221,  223,  223,  636,  223,  223,
      223,  223,  223,  636,  636,  223,  225,  225,  636,  225,
      225,  225,  225,  225,  636,  636,  225,  227,  227,  636,
      227,  227,  227,  227,  227,  636,  636,  227,  229,  229,
      636,  229,  229,  229,  229,  229,  636,  636,  229,  231,
      231,  636,  231,  231,  231,  231,  231,  636,  636,  231,
      237,  237,  237,  636,  636,  237,  237,  636,  636,  237,
      254,  254,  254,  636,  636,  254,  254,  636,  636,  254,
      264,  264,  264,  636,  636,  264,  264,  636,  636,  264,
      267,  267,  267,  636,  267,  267,  267,  636,  636,  267,

      284,  284,  636,  636,  284,  285,  636,  285,  285,  285,
      636,  636,  285,  268,  636,  268,  268,  268,  636,  636,
      268,  300,  300,  300,  300,  636,  636,  300,  319,  319,
      319,  636,  319,  319,  319,  636,  636,  319,  321,  321,
      321,  636,  321,  321,  321,  636,  636,  321,  323,  323,
      323,  636,  323,  323,  323,  636,  636,  323,  324,  324,
      324,  636,  324,  324,  324,  636,  636,  324,  325,  325,
      325,  636,  325,  325,  325,  636,  636,  325,  326,  326,
      326,  636,  326,  326,  326,  636,  636,  326,  327,  327,
      327,  636,  327,  327,  327,  636,  636,  327,  328,  328,

      328,  636,  328,  328,  328,  636,  636,  328,  331,  331,
      331,  636,  331,  331,  331,  636,  636,  331,  332,  332,
      332,  636,  332,  332,  332,  636,  636,  332,  334,  334,
      334,  636,  334,  334,  334,  636,  636,  334,  336,  336,
      336,  636,  336,  336,  336,  636,  636,  336,  338,  338,
      338,  636,  338,  338,  338,  636,  636,  338,  340,  340,
      340,  636,  340,  340,  340,  636,  636,  340,  342,  342,
      342,  636,  342,  342,  342,  636,  636,  342,  343,  343,
      343,  636,  343,  343,  343,  636,  636,  343,  344,  344,
      344,  636,  344,  344,  344,  636,  636,  344,  348,  348,

      348,  636,  348,  348,  348,  636,  636,  348,  359,  636,
      359,  359,  359,  636,  636,  359,  362,  362,  362,  636,
      636,  362,  362,  636,  636,  362,  196,  196,  636,  196,
      196,  196,  196,  196,  209,  209,  636,  209,  209,  209,
      209,  209,  636,  636,  209,  210,  210,  636,  636,  210,
      211,  211,  636,  211,  211,  211,  211,  211,  636,  636,
      211,  212,  212,  636,  636,  212,  213,  213,  636,  213,
      213,  213,  213,  213,  636,  636,  213,  214,  214,  636,
      636,  214,  215,  215,  636,  215,  215,  215,  215,  215,
      636,  636,  215,  216,  216,  636,  636,  216,  217,  217,

      636,  217,  217,  217,  217,  217,  636,  636,  217,  218,
      218,  636,  636,  218,  219,  219,  636,  219,  219,  219,
      219,  219,  636,  636,  219,  220,  220,  636,  636,  220,
      221,  221,  636,  221,  221,  221,  221,  221,  636,  636,
      221,  222,  222,  636,  636,  222,  223,  223,  636,  223,
      223,  223,  223,  223,  636,  636,  223,  224,  224,  636,
      636,  224,  225,  225,  636,  225,  225,  225,  225,  225,
      636,  636,  225,  226,  226,  636,  636,  226,  227,  227,
      636,  227,  227,  227,  227,  227,  636,  636,  227,  228,
      228,  636,  636,  228,  229,  229,  636,  229,  229,  229,

      229,  229,  636,  636,  229,  230,  230,  636,  636,  230,
      231,  231,  636,  231,  231,  231,  231,  231,  636,  636,
      231,  232,  232,  636,  636,  232,  393,  393,  393,  636,
      393,  254,  254,  254,  636,  636,  254,  254,  636,  636,
      254,  264,  264,  264,  636,  636,  264,  264,  636,  636,
      264,  268,  636,  268,  268,  268,  636,  636,  268,  284,
      284,  636,  636,  284,  285,  636,  285,  285,  285,  636,
      636,  285,  300,  300,  300,  300,  636,  636,  300,  319,
      319,  319,  636,  319,  319,  319,  636,  636,  319,  321,
      321,  321,  636,  321,  321,  321,  636,  636,  321,  323,

      323,  323,  636,  323,  323,  323,  636,  636,  323,  324,
      324,  324,  636,  324,  324,  324,  636,  636,  324,  325,
      325,  325,  636,  325,  325,  325,  636,  636,  325,  326,
      326,  326,  636,  326,  326,  326,  636,  636,  326,  327,
      327,  327,  636,  327,  327,  327,  636,  636,  327,  328,
      328,  328,  636,  328,  328,  328,  636,  636,  328,  331,
      331,  331,  636,  331,  331,  331,  636,  636,  331,  332,
      332,  332,  636,  332,  332,  332,  636,  636,  332,  334,
      334,  334,  636,  334,  334,  334,  636,  636,  334,  336,
      336,  336,  636,  336,  336,  336,  636,  636,  336,  338,

      338,  338,  636,  338,  338,  338,  636,  636,  338,  340,
      340,  340,  636,  340,  340,  340,  636,  636,  340,  342,
      342,  342,  636,  342,  342,  342,  636,  636,  342,  343,
      343,  343,  636,  343,  343,  343,  636,  636,  343,  344,
      344,  344,  636,  344,  344,  344,  636,  636,  344,  348,
      348,  348,  636,  348,  348,  348,  636,  636,  348,  359,
      636,  359,  359,  359,  636,  636,  359,  362,  362,  362,
      636,  636,  362,  362,  636,  636,  362,  538,  538,  636,
      538,  538,   45,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636
    } ;

static yyconst flex_int16_t yy_chk[3734] =
    {   0,
        0,    1,    1,    1,    1,    0,    1,    1,    1,   49,
       49,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    4,    4,    4,    3,   54,
       54,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    9,    9,    9,   52,  739,    9,    9,    9,
        9,    9,    9,  659,    9,    9,    9,   15,   15,   15,
       48,   48,   15,   15,   15,   56,   56,   48,   72,   72,

       52,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   53,   53,   53,   11,   11,
       11,   16,   16,   16,   74,   74,   16,   16,   16,   31,
       31,   31,   80,  595,   31,   31,   31,   35,   35,   35,
      593,   80,   35,   35,   35,  118,  118,   11,   11,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
       12,   12,   77,   77,   77,   12,   12,   12,   32,   32,
       32,  109,  590,   32,   32,   32,   71,   71,   32,   36,
       36,   36,  109,   71,   36,   36,   36,   76,   83,   76,
       76,   76,   83,   83,   12,   12,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   17,   17,  112,  124,
       17,   33,   73,   73,  122,   17,  122,   33,  124,   73,
       17,   33,   17,  289,  125,   33,   17,   33,   17,   81,
      125,   81,  289,  112,   34,   81,   33,   17,   18,   18,
       34,   87,   18,   87,   34,  199,   87,   18,   34,  576,
       34,  199,   18,  292,   18,  574,   81,   92,   18,   34,

       18,   92,  292,  102,   92,  102,  102,  102,  573,   18,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,  569,   43,   44,  565,   19,   19,   19,   43,
       44,  563,  111,   43,   44,  111,  111,   43,   44,   43,
       44,  172,  172,   95,  166,  166,  166,   95,   43,   44,
       95,  183,  183,  190,  190,   19,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,  193,
      193,  193,   94,   20,   20,   20,   94,   91,   93,   94,
      561,   91,   93,   96,   91,   93,  110,   96,   94,  110,
       96,   98,  110,   97,   91,   98,   93,   97,   98,  121,

       97,  121,   20,   20,   21,  121,  174,   21,   21,   91,
       98,  241,   21,  129,  201,   21,  352,  129,   21,   21,
      129,   93,   21,   99,   97,  201,  121,   99,  131,  129,
       99,  174,  131,   21,   22,  131,  241,   22,   22,  100,
       99,  352,   22,  100,  205,   22,  100,  130,   22,   22,
      205,  130,   22,  133,  130,   99,  544,  133,  205,  100,
      133,  130,  131,   22,   23,  171,  171,  128,  128,  128,
      543,   23,  171,  195,  195,  133,  541,  128,  540,   23,
       23,   23,   23,  196,  196,  234,  234,   23,  257,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,  257,

       23,   23,  128,  254,   23,  236,  236,  254,  254,   23,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       25,   25,  374,  132,   25,   25,  373,  132,  538,   25,
      132,  373,   25,  374,   25,   25,   25,  182,  182,   25,
       25,  132,   25,  537,  182,  144,  144,  144,  350,  350,
       25,   25,   27,   27,   27,  144,   27,   27,   27,  534,

      134,  396,   27,  529,  134,   27,  132,  134,  358,  358,
       27,  527,  396,   27,   27,   27,   27,   27,  135,   27,
      144,   27,  135,   27,   27,  135,  520,  520,  134,  238,
      238,  238,   27,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,  462,  135,  140,   37,
       37,   37,  140,  526,  145,  140,  189,  189,  145,  145,
      137,  145,  420,  189,  137,  136,  525,  137,  145,  136,
      139,  462,  136,  420,  139,  523,  140,  139,   37,   37,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,  136,  137,  147,   38,   38,   38,  147,

      147,  139,  147,  101,  136,  138,  421,  101,  458,  138,
      101,  148,  138,  522,  463,  148,  148,  421,  148,  458,
      101,  101,  242,  242,  242,   38,   38,   39,   39,   39,
      141,   39,   39,   39,  141,  101,  146,  141,  138,  463,
      146,  146,  459,  146,  513,   39,  101,  511,  141,  138,
      149,   39,  206,  459,  149,  149,  206,  149,   39,   40,
       40,   40,  150,   40,   40,   40,  150,  150,  466,  150,
      146,  151,  206,  141,  488,  151,  151,   40,  151,  466,
      152,  206,  267,   40,  152,  152,  267,  152,  487,  267,
       40,   41,   41,   41,  468,   41,   41,   41,  152,  153,

      233,  233,  485,  153,  153,  154,  153,  233,  481,  154,
      154,  478,  154,  188,  473,   41,   41,  188,  188,  468,
       41,  153,   41,  152,  264,  473,  187,  188,  264,  264,
      187,   41,   55,  187,   55,   55,   55,   55,  486,  477,
       55,  476,  187,  479,   55,   55,   55,   55,  155,  486,
       55,   55,  155,  155,   55,  155,  278,  278,  278,  235,
      235,   55,   55,   57,   57,   57,  235,   57,  479,   57,
       57,  472,   57,   57,   57,  471,  186,  155,   57,   57,
      186,  156,  480,  186,  470,  156,  156,  157,  156,  521,
      521,  157,  157,  246,  157,  158,  246,  246,  469,  158,

      158,  159,  158,  467,  186,  159,  159,  480,  159,   57,
       58,   58,   58,  531,   58,  156,   58,   58,  246,   58,
       58,   58,  465,  269,  531,   58,   58,  269,  158,  160,
      269,  270,  159,  160,  160,  270,  160,  161,  270,  158,
      464,  161,  161,  162,  161,  461,  270,  162,  162,  266,
      162,  515,  460,  266,  266,  454,   58,   59,   59,   59,
      571,   59,  453,   59,   59,  161,   59,   59,   59,  516,
      163,  571,   59,   59,  163,  163,  515,  163,  164,  452,
      167,  451,  164,  164,  167,  164,  168,  167,  271,  592,
      168,  168,  271,  168,  516,  271,  164,  265,  450,  167,

      592,  265,  265,   59,   60,   60,   60,  167,   60,  528,
       60,   60,  265,   60,   60,   60,  207,  207,  449,   60,
       60,  164,  244,  244,  567,  245,  244,  244,  244,  207,
      245,  272,  245,  437,  528,  272,  419,  245,  272,  245,
      273,  207,  417,  245,  273,  416,  245,  273,  272,  567,
       60,   61,   61,   61,  589,   61,  413,   61,   61,  273,
       61,   61,   61,  272,  349,  349,   61,   61,  274,  275,
      276,  349,  274,  275,  276,  274,  275,  276,  277,  589,
      277,  277,  277,  280,  280,  591,  274,  280,  280,  280,
      277,  346,  346,  346,  357,  357,  276,   61,   62,   62,

       62,  357,   62,  412,   62,   62,  411,   62,   62,   62,
      591,  274,  281,   62,   62,  277,  303,  281,  304,  281,
      303,  410,  304,  303,  281,  304,  281,  305,  409,  408,
      281,  305,  303,  281,  305,  304,  307,  362,  401,  400,
      307,  362,  362,  307,   62,   63,   63,   63,  399,   63,
      398,   63,   63,  393,   63,   63,   63,  392,  305,  391,
       63,   63,  306,  311,  390,  389,  306,  311,  307,  306,
      311,  308,  386,  386,  386,  308,  388,  309,  308,  310,
      306,  309,  384,  310,  309,  456,  310,  308,  308,  456,
      456,   63,   64,   64,   64,  383,   64,  308,   64,   64,

      308,   64,   64,   64,  310,  306,  381,   64,   64,  312,
      309,  310,  380,  312,  379,  378,  312,  376,  313,  456,
      314,  309,  313,  312,  314,  313,  316,  314,  315,  375,
      316,  372,  315,  316,  314,  315,  371,  369,   64,   65,
       65,   65,  368,   65,  366,   65,   65,  364,   65,   65,
       65,  313,  356,  315,   65,   65,  355,  316,  314,  319,
      354,  313,  353,  319,  319,  320,  319,  351,  318,  320,
      320,  321,  320,  347,  317,  321,  321,  347,  321,  562,
      347,  302,  320,  562,  562,   65,   66,   66,   66,  299,
       66,  297,   66,   66,  296,   66,   66,   66,  294,  322,

      293,   66,   66,  322,  322,  323,  322,  291,  290,  323,
      323,  324,  323,  288,  287,  324,  324,  325,  324,  361,
      286,  325,  325,  361,  325,  283,  361,  406,  406,  406,
      322,  263,   66,   67,   67,   67,  262,   67,  261,   67,
       67,  259,   67,   67,   67,  258,  326,  256,   67,   67,
      326,  326,  327,  326,  255,  253,  327,  327,  328,  327,
      252,  251,  328,  328,  250,  328,  248,  329,  247,  360,
      208,  329,  329,  360,  329,  204,  360,  203,  202,   67,
       68,   68,   68,  200,   68,  329,   68,   68,  198,   68,
       68,   68,  197,  330,  360,   68,   68,  330,  330,  331,

      330,  403,  192,  331,  331,  403,  331,  332,  403,  179,
      329,  332,  332,  334,  332,  424,  178,  334,  334,  424,
      334,  177,  424,  176,  175,  330,   68,   78,  457,  457,
      457,   78,   78,   78,  142,   78,   78,   78,  474,  474,
      474,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  127,  120,   78,
       78,   78,   90,  115,  335,  114,   90,   90,  335,  335,
      336,  335,  113,  107,  336,  336,  338,  336,  335,   90,
      338,  338,   89,  338,   90,  333,   88,   86,   90,  333,

      333,   90,  333,   90,  103,   85,  103,  103,  103,  363,
       84,   82,  103,  363,  363,   45,  103,  103,  103,  103,
       30,   29,  103,    0,  103,  103,  103,  103,  333,    0,
      103,  103,  103,  103,  363,  475,  475,  475,    0,  333,
        0,  103,  103,  209,  209,  209,    0,  209,    0,  209,
      209,    0,  209,  209,  209,  519,  519,  519,  209,  209,
      337,    0,    0,    0,  337,  337,  339,  337,    0,    0,
      339,  339,  340,  339,    0,    0,  340,  340,  342,  340,
      339,    0,  342,  342,    0,  342,  502,  502,  502,  209,
      211,  211,  211,  337,  211,    0,  211,  211,    0,  211,

      211,  211,    0,  337,  339,  211,  211,  341,    0,    0,
        0,  341,  341,  343,  341,    0,    0,  343,  343,  344,
      343,  404,  502,  344,  344,  404,  344,    0,  404,  385,
      385,    0,  341,  385,  385,  385,  211,  213,  213,  213,
        0,  213,    0,  213,  213,    0,  213,  213,  213,  404,
      345,    0,  213,  213,  345,  345,  348,  345,  402,    0,
      348,  348,  402,  348,  387,  402,  387,  387,  387,  407,
      407,  407,    0,  405,    0,    0,  387,  405,    0,  407,
      405,  345,    0,  213,  215,  215,  215,    0,  215,    0,
      215,  215,  402,  215,  215,  215,    0,    0,    0,  215,

      215,  387,  405,    0,  407,    0,  422,  425,  423,    0,
      422,  425,  423,  422,  425,  423,  426,  427,    0,    0,
      426,  427,  431,  426,  427,    0,  431,    0,    0,  431,
      215,  217,  217,  217,  423,  217,  425,  217,  217,  422,
      217,  217,  217,    0,    0,  427,  217,  217,  428,  426,
      422,    0,  428,    0,  431,  428,    0,  432,  429,    0,
      426,  432,  429,    0,  432,  429,  428,  430,  434,  436,
        0,  430,  434,  436,  430,  434,  436,  217,  219,  219,
      219,  430,  219,    0,  219,  219,  429,  219,  219,  219,
      432,  428,  433,  219,  219,    0,  433,  434,  430,  433,

        0,  432,  436,  435,    0,    0,    0,  435,    0,  433,
      435,  438,    0,  436,    0,  438,  438,    0,  438,    0,
        0,    0,    0,    0,  219,  221,  221,  221,    0,  221,
      435,  221,  221,    0,  221,  221,  221,  438,  439,    0,
      221,  221,  439,  439,    0,  439,  440,    0,    0,    0,
      440,  440,  441,  440,    0,    0,  441,  441,  442,  441,
      482,    0,  442,  442,  482,  442,    0,  482,    0,    0,
        0,  221,  223,  223,  223,  440,  223,    0,  223,  223,
      482,  223,  223,  223,    0,  441,    0,  223,  223,    0,
      442,    0,    0,  443,    0,    0,  441,  443,  443,    0,

      443,    0,  444,    0,    0,    0,  444,  444,  446,  444,
      443,    0,  446,  446,    0,  446,    0,    0,  223,  225,
      225,  225,    0,  225,    0,  225,  225,    0,  225,  225,
      225,  444,  445,    0,  225,  225,  445,  445,  447,  445,
        0,  446,  447,  447,  448,  447,  455,    0,  448,  448,
      455,  448,  446,  455,  483,    0,  484,    0,  483,  445,
      484,  483,    0,  484,    0,  225,  227,  227,  227,    0,
      227,    0,  227,  227,    0,  227,  227,  227,    0,  489,
      483,  227,  227,  489,  455,    0,  489,    0,  490,  493,
      491,    0,  490,  493,  491,  490,  493,  491,  492,  497,

        0,    0,  492,  497,  494,  492,  497,    0,  494,    0,
        0,  494,  227,  229,  229,  229,  490,  229,  491,  229,
      229,  494,  229,  229,  229,  492,  495,  496,  229,  229,
      495,  496,  498,  495,  496,    0,  498,    0,  499,  498,
      500,    0,  499,    0,  500,  499,  495,  500,    0,  496,
        0,  501,    0,    0,  498,  501,    0,    0,  501,  229,
      231,  231,  231,  499,  231,    0,  231,  231,    0,  231,
      231,  231,  500,  503,    0,  231,  231,  503,  503,  501,
      503,  504,    0,    0,    0,  504,  504,  505,  504,    0,
        0,  505,  505,  506,  505,  517,    0,  506,  506,  517,

      506,  503,  517,    0,    0,    0,  231,  239,    0,  504,
        0,  239,  239,  239,    0,  239,  239,  239,    0,    0,
        0,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  239,
      239,  239,  239,  239,  239,  239,  239,    0,    0,  239,
      239,  239,  240,  240,  240,    0,    0,    0,  240,    0,
        0,    0,  240,  240,  240,  240,    0,    0,  240,    0,
      240,  240,  240,  240,    0,    0,  240,  240,  240,  240,
      518,    0,    0,    0,  518,  518,    0,  240,  240,  282,
        0,    0,    0,  282,  282,  507,  282,  282,  518,  507,

      507,  282,  507,  282,  508,    0,    0,  282,  508,  508,
      282,  508,    0,    0,    0,  509,    0,  507,  282,  509,
      509,  510,  509,  518,    0,  510,  510,  542,  510,  508,
        0,  542,  545,  546,  542,    0,  545,  546,  547,  545,
      546,    0,  547,    0,  551,  547,    0,  509,  551,  510,
      548,  551,  549,    0,  548,  542,  549,  548,    0,  549,
        0,    0,  546,  550,  545,  552,  551,  550,  548,  552,
      550,  547,  552,  554,    0,    0,    0,  554,  554,  549,
      554,  552,  547,    0,  555,    0,    0,    0,  555,  555,
      550,  555,  556,  548,  575,    0,  556,  556,  575,  556,

        0,  575,  557,    0,    0,  554,  557,  557,    0,  557,
      558,  575,    0,  555,  558,  558,  559,  558,  577,  556,
      559,  559,  577,  559,  557,  577,  578,  579,  577,    0,
      578,  579,  559,  578,  579,  580,  581,  582,    0,  580,
      581,  582,  580,  581,  582,  583,  584,    0,  578,  583,
      584,  584,  583,  584,    0,  585,  584,  596,  579,  585,
      585,  596,  585,  582,  596,    0,    0,  586,  580,  581,
        0,  586,  586,  583,  586,    0,    0,  585,  587,  580,
      581,    0,  587,  587,  588,  587,  597,    0,  588,  588,
      597,  588,  598,  597,  599,    0,  598,    0,  599,  598,

      586,  599,  601,  600,  587,    0,  601,  600,    0,  601,
      600,  586,  588,  597,    0,  602,    0,    0,    0,  602,
      598,  600,  602,  603,  601,    0,    0,  603,  603,  604,
      603,    0,    0,  604,  604,  605,  604,    0,    0,  605,
      605,  602,  605,  606,    0,  613,  600,  606,  606,  613,
      606,    0,  613,  605,  607,    0,  604,    0,  607,  607,
        0,  607,  614,  615,  613,  606,  614,  615,  616,  614,
      615,    0,  616,    0,    0,  616,    0,  617,  605,    0,
      607,  617,    0,    0,  617,  618,    0,  614,    0,  618,
      618,  619,  618,  622,  615,  619,  619,  622,  619,    0,

      622,  616,    0,  620,  618,    0,  617,  620,  620,  621,
      620,  623,  616,  621,  621,  623,  621,    0,  623,  624,
      625,  622,  619,  624,  625,  625,  624,  625,    0,    0,
      626,    0,    0,  624,  626,  626,  620,  626,  621,  627,
      623,    0,    0,  627,  627,    0,  627,  620,  625,  628,
        0,  629,    0,  628,  628,  629,  628,  630,  629,  626,
        0,  630,  630,  628,  630,  631,    0,  629,    0,  631,
      631,  632,  631,  633,    0,  632,  632,  633,  632,  634,
      633,    0,    0,  634,  634,  635,  634,  632,    0,  635,
      635,    0,  635,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  633,    0,    0,    0,
        0,    0,  634,    0,    0,    0,    0,  633,    0,    0,
        0,    0,    0,  634,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  638,  638,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      640,  640,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  642,  642,  642,  642,  642,  642,
      642,  642,  642,  642,  642,  642,  643,  643,  643,  643,

      643,  643,  643,  643,  643,  643,  643,  643,  644,  644,
      644,  644,  644,  644,  644,  644,  644,  644,  644,  644,
      645,  645,    0,  645,  645,  645,  645,  645,  646,  646,
        0,  646,  646,  646,  646,  646,    0,    0,  646,  647,
      647,    0,  647,  647,  647,  647,  647,    0,    0,  647,
      648,  648,    0,  648,  648,  648,  648,  648,    0,    0,
      648,  649,  649,    0,  649,  649,  649,  649,  649,    0,
        0,  649,  650,  650,    0,  650,  650,  650,  650,  650,
        0,    0,  650,  651,  651,    0,  651,  651,  651,  651,
      651,    0,    0,  651,  652,  652,    0,  652,  652,  652,

      652,  652,    0,    0,  652,  653,  653,    0,  653,  653,
      653,  653,  653,    0,    0,  653,  654,  654,    0,  654,
      654,  654,  654,  654,    0,    0,  654,  655,  655,    0,
      655,  655,  655,  655,  655,    0,    0,  655,  656,  656,
        0,  656,  656,  656,  656,  656,    0,    0,  656,  657,
      657,    0,  657,  657,  657,  657,  657,    0,    0,  657,
      658,  658,  658,    0,    0,  658,  658,    0,    0,  658,
      660,  660,  660,    0,    0,  660,  660,    0,    0,  660,
      661,  661,  661,    0,    0,  661,  661,    0,    0,  661,
      662,  662,  662,    0,  662,  662,  662,    0,    0,  662,

      663,  663,    0,    0,  663,  664,    0,  664,  664,  664,
        0,    0,  664,  665,    0,  665,  665,  665,    0,    0,
      665,  666,  666,  666,  666,    0,    0,  666,  667,  667,
      667,    0,  667,  667,  667,    0,    0,  667,  668,  668,
      668,    0,  668,  668,  668,    0,    0,  668,  669,  669,
      669,    0,  669,  669,  669,    0,    0,  669,  670,  670,
      670,    0,  670,  670,  670,    0,    0,  670,  671,  671,
      671,    0,  671,  671,  671,    0,    0,  671,  672,  672,
      672,    0,  672,  672,  672,    0,    0,  672,  673,  673,
      673,    0,  673,  673,  673,    0,    0,  673,  674,  674,

      674,    0,  674,  674,  674,    0,    0,  674,  675,  675,
      675,    0,  675,  675,  675,    0,    0,  675,  676,  676,
      676,    0,  676,  676,  676,    0,    0,  676,  677,  677,
      677,    0,  677,  677,  677,    0,    0,  677,  678,  678,
      678,    0,  678,  678,  678,    0,    0,  678,  679,  679,
      679,    0,  679,  679,  679,    0,    0,  679,  680,  680,
      680,    0,  680,  680,  680,    0,    0,  680,  681,  681,
      681,    0,  681,  681,  681,    0,    0,  681,  682,  682,
      682,    0,  682,  682,  682,    0,    0,  682,  683,  683,
      683,    0,  683,  683,  683,    0,    0,  683,  684,  684,

      684,    0,  684,  684,  684,    0,    0,  684,  685,    0,
      685,  685,  685,    0,    0,  685,  686,  686,  686,    0,
        0,  686,  686,    0,    0,  686,  687,  687,    0,  687,
      687,  687,  687,  687,  688,  688,    0,  688,  688,  688,
      688,  688,    0,    0,  688,  689,  689,    0,    0,  689,
      690,  690,    0,  690,  690,  690,  690,  690,    0,    0,
      690,  691,  691,    0,    0,  691,  692,  692,    0,  692,
      692,  692,  692,  692,    0,    0,  692,  693,  693,    0,
        0,  693,  694,  694,    0,  694,  694,  694,  694,  694,
        0,    0,  694,  695,  695,    0,    0,  695,  696,  696,

        0,  696,  696,  696,  696,  696,    0,    0,  696,  697,
      697,    0,    0,  697,  698,  698,    0,  698,  698,  698,
      698,  698,    0,    0,  698,  699,  699,    0,    0,  699,
      700,  700,    0,  700,  700,  700,  700,  700,    0,    0,
      700,  701,  701,    0,    0,  701,  702,  702,    0,  702,
      702,  702,  702,  702,    0,    0,  702,  703,  703,    0,
        0,  703,  704,  704,    0,  704,  704,  704,  704,  704,
        0,    0,  704,  705,  705,    0,    0,  705,  706,  706,
        0,  706,  706,  706,  706,  706,    0,    0,  706,  707,
      707,    0,    0,  707,  708,  708,    0,  708,  708,  708,

      708,  708,    0,    0,  708,  709,  709,    0,    0,  709,
      710,  710,    0,  710,  710,  710,  710,  710,    0,    0,
      710,  711,  711,    0,    0,  711,  712,  712,  712,    0,
      712,  713,  713,  713,    0,    0,  713,  713,    0,    0,
      713,  714,  714,  714,    0,    0,  714,  714,    0,    0,
      714,  715,    0,  715,  715,  715,    0,    0,  715,  716,
      716,    0,    0,  716,  717,    0,  717,  717,  717,    0,
        0,  717,  718,  718,  718,  718,    0,    0,  718,  719,
      719,  719,    0,  719,  719,  719,    0,    0,  719,  720,
      720,  720,    0,  720,  720,  720,    0,    0,  720,  721,

      721,  721,    0,  721,  721,  721,    0,    0,  721,  722,
      722,  722,    0,  722,  722,  722,    0,    0,  722,  723,
      723,  723,    0,  723,  723,  723,    0,    0,  723,  724,
      724,  724,    0,  724,  724,  724,    0,    0,  724,  725,
      725,  725,    0,  725,  725,  725,    0,    0,  725,  726,
      726,  726,    0,  726,  726,  726,    0,    0,  726,  727,
      727,  727,    0,  727,  727,  727,    0,    0,  727,  728,
      728,  728,    0,  728,  728,  728,    0,    0,  728,  729,
      729,  729,    0,  729,  729,  729,    0,    0,  729,  730,
      730,  730,    0,  730,  730,  730,    0,    0,  730,  731,

      731,  731,    0,  731,  731,  731,    0,    0,  731,  732,
      732,  732,    0,  732,  732,  732,    0,    0,  732,  733,
      733,  733,    0,  733,  733,  733,    0,    0,  733,  734,
      734,  734,    0,  734,  734,  734,    0,    0,  734,  735,
      735,  735,    0,  735,  735,  735,    0,    0,  735,  736,
      736,  736,    0,  736,  736,  736,    0,    0,  736,  737,
        0,  737,  737,  737,    0,    0,  737,  738,  738,  738,
        0,    0,  738,  738,    0,    0,  738,  740,  740,    0,
      740,  740,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,

      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      636,  636,  636
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[93] =
    {   0,
1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int spice__flex_debug;
int spice__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *spice_text;
#line 1 "scan_spice.l"
/* -*-c-*- */
#line 4 "scan_spice.l"
/*
 * scan_spice.l - scanner for a Spice netlist
 *
 * Copyright (C) 2004-2009 Stefan Jahn <stefan@lkcc.org>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.  
 *
 * $Id$
 *
 */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "check_spice.h"
#include "tokens_spice.h"

#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif

/* fixing invalid identifiers */
static void spice_fix_identifier (char * ident) {
  char * p;
  for (p = ident; *p != '\0'; p++)
    switch (*p) {
    case '+': *p = 'P'; break;
    case '-': *p = 'N'; break;
    case '/': *p = '_'; break;
    }
}

/* Source functions */
/* Device Models */
/* Voltage derivatives */
/* Options specials */
/* Model specific properties */
/* Plot/Print specific identifiers */
/* MOS specific device properties */
/* analog behavioural */



#line 1629 "scan_spice.cpp"

#define INITIAL 0
#define COMMENT 1
#define IVREF 2
#define DEVPROP 3
#define LREF 4
#define MODREF1 5
#define MODREF2 6
#define IGNORE 7
#define FUNREF 8
#define FILEREF 9
#define VREF 10
#define STARTUP 11
#define VSINGLE 12
#define ISWITCH 13
#define VSWITCH 14
#define CONTROL 15
#define GEVALS 16
#define INLINE 17
#define SUBCKT 18
#define TLPROP 19
#define RLCPROP 20
#define FHVALS 21

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int spice_lex_destroy (void );

int spice_get_debug (void );

void spice_set_debug (int debug_flag  );

YY_EXTRA_TYPE spice_get_extra (void );

void spice_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *spice_get_in (void );

void spice_set_in  (FILE * in_str  );

FILE *spice_get_out (void );

void spice_set_out  (FILE * out_str  );

int spice_get_leng (void );

char *spice_get_text (void );

int spice_get_lineno (void );

void spice_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int spice_wrap (void );
#else
extern int spice_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( spice_text, spice_leng, 1, spice_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( spice_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( spice_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, spice_in))==0 && ferror(spice_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(spice_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int spice_lex (void);

#define YY_DECL int spice_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after spice_text and spice_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( spice_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(spice_text[spice_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 139 "scan_spice.l"


#line 1833 "scan_spice.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! spice_in )
			spice_in = stdin;

		if ( ! spice_out )
			spice_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			spice_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				spice__create_buffer(spice_in,YY_BUF_SIZE );
		}

		spice__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of spice_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 637 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3683 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < spice_leng; ++yyl )
				if ( spice_text[yyl] == '\n' )
					   
    spice_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 141 "scan_spice.l"
{ /* detect initial title lines */
    spice_lval.str = strdup (spice_text);
    BEGIN(STARTUP);
    return TitleLine;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 147 "scan_spice.l"
{ /* Spice3 ignores any lines starting spaces */
    BEGIN(COMMENT);
  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 151 "scan_spice.l"
{ /* ignored region begins here */
    BEGIN(COMMENT);
  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 157 "scan_spice.l"
{
    /* ignored inline region begins here (3f5, 2g6 and hspice) */
    BEGIN(INLINE);
  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 162 "scan_spice.l"
{
    /* control (interactive) region start */
    BEGIN(CONTROL);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 167 "scan_spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 168 "scan_spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 170 "scan_spice.l"
{
    BEGIN(STARTUP);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 174 "scan_spice.l"
{
  /* skip EOF character */
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 178 "scan_spice.l"
{
    /* subcircuit definition start */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(SUBCKT);
    return SUBCKT_Action;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 185 "scan_spice.l"
{ /* subcircuit definition end */
    BEGIN(SUBCKT);
    return ENDS_Action;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 190 "scan_spice.l"
{ /* R, L and C instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(RLCPROP);
    return RLC_Device;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 196 "scan_spice.l"
{ /* Mutual inductor instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(LREF);
    return K_Device;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 202 "scan_spice.l"
{
    /* voltage and current source instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(FUNREF);
    return IV_Source;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 209 "scan_spice.l"
{
    /* voltage controlled source instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(GEVALS);
    return GE_Source;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 216 "scan_spice.l"
{
    /* current controlled source instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(FHVALS);
    return FH_Source;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 223 "scan_spice.l"
{
    /* non-linear dependent source instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(IGNORE);
    return B_Source;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 230 "scan_spice.l"
{ /* subcircuit instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(STARTUP);
    return X_Device;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 236 "scan_spice.l"
{ /* lossy transline */
    spice_lval.ident = strdup (spice_text);
    BEGIN(STARTUP);
    return O_Device;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 242 "scan_spice.l"
{ /* lossless transline */
    spice_lval.ident = strdup (spice_text);
    BEGIN(TLPROP);
    return T_Device;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 248 "scan_spice.l"
{ /* distributed lossy transline */
    spice_lval.ident = strdup (spice_text);
    BEGIN(STARTUP);
    return U_Device;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 254 "scan_spice.l"
{ /* voltage controlled switch */
    spice_lval.ident = strdup (spice_text);
    BEGIN(VSWITCH);
    return S_Device;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 260 "scan_spice.l"
{ /* current controlled switch */
    spice_lval.ident = strdup (spice_text);
    BEGIN(ISWITCH);
    return W_Device;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 266 "scan_spice.l"
{ /* device Model definitions */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(MODREF1);
    return MODEL_Action;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 272 "scan_spice.l"
{ /* transient analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return TRAN_Action;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 278 "scan_spice.l"
{ /* plotting action */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IVREF);
    return PLOT_Action;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 284 "scan_spice.l"
{ /* AC analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(FUNREF);
    return AC_Action;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 290 "scan_spice.l"
{ /* distortion analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(FUNREF);
    return DISTO_Action;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 296 "scan_spice.l"
{ /* nodeset functionality */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(VSINGLE);
    return NODESET_Action;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 302 "scan_spice.l"
{ /* nodeset functionality */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(VSINGLE);
    return NODESET_Action;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 308 "scan_spice.l"
{ /* DC analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IVREF);
    return DC_Action;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 314 "scan_spice.l"
{ /* operating point analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return OP_Action;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 320 "scan_spice.l"
{ /* temperature analysis (Spice 2g6) */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return TEMP_Action;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 326 "scan_spice.l"
{ /* printing action */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(VREF);
    return PRINT_Action;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 332 "scan_spice.l"
{ /* general options */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return OPTIONS_Action;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 338 "scan_spice.l"
{ /* general options (abbrev.) */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return OPTIONS_Action;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 344 "scan_spice.l"
{ /* general options (abbrev.) */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return OPTIONS_Action;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 350 "scan_spice.l"
{ /* special width of ??? */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return WIDTH_Action;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 356 "scan_spice.l"
{ /* noise analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IVREF);
    return NOISE_Action;
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 362 "scan_spice.l"
{ /* file include */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(FILEREF);
    return INCLUDE_Action;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 368 "scan_spice.l"
{ /* pole-zero analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(STARTUP);
    return PZ_Action;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 374 "scan_spice.l"
{ /* save line */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IGNORE);
    return SAVE_Action;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 380 "scan_spice.l"
{ /* sensitivity analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IGNORE);
    return SENS_Action;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 386 "scan_spice.l"
{ /* transfer function analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IGNORE);
    return TF_Action;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 392 "scan_spice.l"
{ /* fourier analysis */
    spice_lval.ident = strdup (&spice_text[1]);
    BEGIN(IGNORE);
    return FOUR_Action;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 398 "scan_spice.l"
{ /* pole-zero specials */
    spice_lval.ident = strdup (spice_text);
    return CurVol;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 403 "scan_spice.l"
{ /* other pole-zero specials */
    spice_lval.ident = strdup (spice_text);
    return PoleZero;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 408 "scan_spice.l"
{ /* a file reference */
    spice_lval.ident = strdup (spice_text);
    return File;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 413 "scan_spice.l"
{ /* a print special */
    spice_lval.ident = strdup (spice_text);
    return ALL_Special;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 418 "scan_spice.l"
{ /* a TC special */
    spice_lval.ident = strdup (spice_text);
    return TC_Special;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 423 "scan_spice.l"
{ /* a device special */
    spice_lval.ident = strdup (spice_text);
    return OFF_Special;
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 428 "scan_spice.l"
{ /* a device special */
    spice_lval.ident = strdup (spice_text);
    return ON_Special;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 433 "scan_spice.l"
{ /* another device special */
    spice_lval.ident = strdup (spice_text);
    return IC_Special;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 438 "scan_spice.l"
{ /* another device special */
    spice_lval.ident = strdup (spice_text);
    return TEMP_Special;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 443 "scan_spice.l"
{ /* another device special */
    spice_lval.ident = strdup (spice_text);
    return MOS_Special;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 448 "scan_spice.l"
{ /* voltage derivatives (plotting and printing) */
    spice_lval.ident = strdup (spice_text);
    return VoltFunc;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 453 "scan_spice.l"
{ /* voltage derivatives (plotting and printing) */
    spice_lval.ident = strdup (spice_text);
    return VoltFunc;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 458 "scan_spice.l"
{ /* option specials */
    spice_lval.ident = strdup (spice_text);
    return Options;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 463 "scan_spice.l"
{ /* Model specials */
    spice_lval.ident = strdup (spice_text);
    return ModelProps;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 468 "scan_spice.l"
{ /* voltage source references */
    spice_lval.ident = strdup (spice_text);
    return V_Source;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 473 "scan_spice.l"
{ /* current source references */
    spice_lval.ident = strdup (spice_text);
    return I_Source;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 478 "scan_spice.l"
{ /* I function (plotting and printing) */
    spice_lval.ident = strdup (spice_text);
    return CurrFunc;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 483 "scan_spice.l"
{ /* print/plot specific identifiers */
    spice_lval.ident = strdup (spice_text);
    return SIM_Type;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 488 "scan_spice.l"
{ /* inductor references */
    spice_lval.ident = strdup (spice_text);
    return L_Device;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 493 "scan_spice.l"
{ /* diode instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(DEVPROP);
    return Diode_Device;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 499 "scan_spice.l"
{ /* BJT instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(DEVPROP);
    return Bipolar_Device;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 505 "scan_spice.l"
{ /* JFET instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(DEVPROP);
    return JFET_Device;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 511 "scan_spice.l"
{ /* MOSFET instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(DEVPROP);
    return MOSFET_Device;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 517 "scan_spice.l"
{ /* MESFET instances */
    spice_lval.ident = strdup (spice_text);
    BEGIN(DEVPROP);
    return MESFET_Device;
}
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 523 "scan_spice.l"
{ /* identify end of netlist */
    return End;
}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 528 "scan_spice.l"
{
    /* identify node (containing digits) */
    spice_lval.ident = strdup (spice_text);
    return Digits;
}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 535 "scan_spice.l"
{
    /* identify float (any kind) */
    spice_lval.ident = strdup (spice_text);
    return Floats;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 541 "scan_spice.l"
{
    /* identify analog behaviour */
    spice_lval.ident = strdup (spice_text);
    return Behave;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 547 "scan_spice.l"
{
    /* identify analog behaviour */
    spice_lval.ident = strdup (spice_text);
    BEGIN(IGNORE);
    return Behave;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 554 "scan_spice.l"
{ /* function specials (e.g. in sources) */
    spice_lval.ident = strdup (spice_text);
    return Function;
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 559 "scan_spice.l"
{ /* Model specification specials */
    spice_lval.ident = strdup (spice_text);
    BEGIN(STARTUP);
    return MODEL_Spec;
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 566 "scan_spice.l"
{ /* arbitrary identifier */
    spice_lval.ident = strdup (spice_text);
    spice_fix_identifier (spice_lval.ident);
    return Identifier;
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 572 "scan_spice.l"
{ /* arbitrary identifier */
    spice_lval.ident = strdup (spice_text);
    spice_fix_identifier (spice_lval.ident);
    BEGIN(STARTUP);
    return Identifier;
}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 579 "scan_spice.l"
{ /* arbitrary identifier */
    spice_lval.ident = strdup (spice_text);
    spice_fix_identifier (spice_lval.ident);
    BEGIN(MODREF2);
    return Identifier;
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 586 "scan_spice.l"
{
    /* I function (plotting and printing) */
    spice_lval.ident = strdup (spice_text);
    return BranchFunc;
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 592 "scan_spice.l"
{
    /* operating point (plotting and printing) */
    spice_lval.ident = strdup (spice_text);
    return OpFunc;
}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 599 "scan_spice.l"
{
    /* identify node */
    spice_lval.ident = strdup (spice_text);
    return Nodes;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 606 "scan_spice.l"
{
    /* detect end of line */
    BEGIN(STARTUP);
    return Eol;
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 612 "scan_spice.l"
{
    /* skip spaces, '=', '(', ')', ',' and the leading '+' */
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 616 "scan_spice.l"
{ BEGIN(STARTUP); /* skipping ends here */ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 617 "scan_spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 618 "scan_spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 620 "scan_spice.l"
{ BEGIN(STARTUP); return Eol; /* skipping ends here */ }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 621 "scan_spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 622 "scan_spice.l"
{ /* skip any character in here */ }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 624 "scan_spice.l"
{ /* any other character is invalid */
    fprintf (stderr, 
	     "line %d: syntax error, unrecognized character: `%s'\n", 
	     spice_lineno, spice_text);
    return InvalidCharacter;
}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 631 "scan_spice.l"
ECHO;
	YY_BREAK
#line 2700 "scan_spice.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(IVREF):
case YY_STATE_EOF(DEVPROP):
case YY_STATE_EOF(LREF):
case YY_STATE_EOF(MODREF1):
case YY_STATE_EOF(MODREF2):
case YY_STATE_EOF(IGNORE):
case YY_STATE_EOF(FUNREF):
case YY_STATE_EOF(FILEREF):
case YY_STATE_EOF(VREF):
case YY_STATE_EOF(STARTUP):
case YY_STATE_EOF(VSINGLE):
case YY_STATE_EOF(ISWITCH):
case YY_STATE_EOF(VSWITCH):
case YY_STATE_EOF(CONTROL):
case YY_STATE_EOF(GEVALS):
case YY_STATE_EOF(INLINE):
case YY_STATE_EOF(SUBCKT):
case YY_STATE_EOF(TLPROP):
case YY_STATE_EOF(RLCPROP):
case YY_STATE_EOF(FHVALS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed spice_in at a new source and called
			 * spice_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = spice_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( spice_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * spice_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of spice_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					spice_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			spice_restart(spice_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) spice_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 637 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 637 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 636);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					spice_restart(spice_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( spice_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve spice_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    spice_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void spice_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        spice_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            spice__create_buffer(spice_in,YY_BUF_SIZE );
	}

	spice__init_buffer(YY_CURRENT_BUFFER,input_file );
	spice__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void spice__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		spice_pop_buffer_state();
	 *		spice_push_buffer_state(new_buffer);
     */
	spice_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	spice__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (spice_wrap()) processing, but the only time this flag
	 * is looked at is after spice_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void spice__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	spice_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE spice__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) spice_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in spice__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) spice_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in spice__create_buffer()" );

	b->yy_is_our_buffer = 1;

	spice__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with spice__create_buffer()
 * 
 */
    void spice__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		spice_free((void *) b->yy_ch_buf  );

	spice_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a spice_restart() or at EOF.
 */
    static void spice__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	spice__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then spice__init_buffer was _probably_
     * called from spice_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void spice__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		spice__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void spice_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	spice_ensure_buffer_stack();

	/* This block is copied from spice__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from spice__switch_to_buffer. */
	spice__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void spice_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	spice__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		spice__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void spice_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)spice_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in spice_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)spice_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in spice_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE spice__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) spice_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in spice__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	spice__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to spice_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       spice__scan_bytes() instead.
 */
YY_BUFFER_STATE spice__scan_string (yyconst char * yystr )
{
    
	return spice__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to spice_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE spice__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) spice_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in spice__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = spice__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in spice__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up spice_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		spice_text[spice_leng] = (yy_hold_char); \
		(yy_c_buf_p) = spice_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		spice_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int spice_get_lineno  (void)
{
        
    return spice_lineno;
}

/** Get the input stream.
 * 
 */
FILE *spice_get_in  (void)
{
        return spice_in;
}

/** Get the output stream.
 * 
 */
FILE *spice_get_out  (void)
{
        return spice_out;
}

/** Get the length of the current token.
 * 
 */
int spice_get_leng  (void)
{
        return spice_leng;
}

/** Get the current token.
 * 
 */

char *spice_get_text  (void)
{
        return spice_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void spice_set_lineno (int  line_number )
{
    
    spice_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see spice__switch_to_buffer
 */
void spice_set_in (FILE *  in_str )
{
        spice_in = in_str ;
}

void spice_set_out (FILE *  out_str )
{
        spice_out = out_str ;
}

int spice_get_debug  (void)
{
        return spice__flex_debug;
}

void spice_set_debug (int  bdebug )
{
        spice__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from spice_lex_destroy(), so don't allocate here.
     */

    /* We do not touch spice_lineno unless the option is enabled. */
    spice_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    spice_in = stdin;
    spice_out = stdout;
#else
    spice_in = (FILE *) 0;
    spice_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * spice_lex_init()
     */
    return 0;
}

/* spice_lex_destroy is for both reentrant and non-reentrant scanners. */
int spice_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		spice__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		spice_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	spice_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * spice_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *spice_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *spice_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void spice_free (void * ptr )
{
	free( (char *) ptr );	/* see spice_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 631 "scan_spice.l"



