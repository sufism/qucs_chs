# 1 "./fa2b.va"











# 1 "disciplines.vams"






nature Current
 access=I;
 units="A";
 abstol=1e-12;
endnature

nature Voltage
 access=V;
 units="V";
 abstol=1e-6;
endnature

discipline electrical
 potential Voltage;
 flow      Current;
enddiscipline

nature Temperature
 access=Temp;
 units="C";
 abstol=1e-4;
endnature

nature Power
 access=Pwr;
 units="W";
 abstol=1e-9;
endnature

discipline thermal
 potential Temperature;
 flow      Power;
enddiscipline
# 13 "./fa2b.va"
# 1 "constants.vams"







# 10 "constants.vams"

































# 14 "./fa2b.va"
module fa2b (D, C, B, A, CI, CO, S1, S0); 
 inout D, C, B, A, CI, CO, S1, S0;
 electrical D, C, B, A, CI, CO, S1, S0;
 electrical S0n1, S0n2, S1n1, S1n2, COn1, COn2;


 parameter real TR=6 from [1.0:20.0]  (*info="transfer function high scaling factor"*);
 parameter real Delay = 1e-9 from [0: inf]  (*info="output delay" unit="s"*);

 real Rd, Cd, mS0a, mS0b, mS0, mS1a, mS1b, mS1, mCO;

analog begin
@(initial_model)
  begin
    Rd = 1e3;
    Cd= Delay*1.43/Rd;
  end

mS0a = V(B)*(1-V(D))+(1-V(B))*V(D);
mS0  = V(CI)*(1-mS0a)+(1-V(CI))*mS0a;
mS1a = V(B)*V(D)+V(CI)*V(B)+V(CI)*V(D);
mS1b = V(A)*(1-V(C))+(1-V(A))*V(C);
mS1  = mS1a*(1-mS1b)+(1-mS1a)*mS1b;
mCO  = V(A)*V(C)+(V(A)+V(C))*mS1a;

if (mS0 >= 0.5) mS0 = 1; else mS0 = 0;
if (mS1 >= 0.5) mS1 = 1; else mS1 = 0;
if (mCO >= 0.5) mCO = 1; else mCO = 0;
I(S0n1) <+ -0.5*(1+tanh(TR*(mS0-0.5)));
I(S0n1) <+ V(S0n1);
I(S0n1, S0n2) <+ V(S0n1,S0n2)/Rd;
I(S0n2) <+ ddt(Cd*V(S0n2));
I(S0)  <+ -V(S0n2);
I(S0) <+ V(S0);

I(S1n1) <+ -0.5*(1+tanh(TR*(mS1-0.5)));
I(S1n1) <+ V(S1n1);
I(S1n1, S1n2) <+ V(S1n1,S1n2)/Rd;
I(S1n2) <+ ddt(Cd*V(S1n2));
I(S1)  <+ -V(S1n2);
I(S1) <+ V(S1);

I(COn1) <+ -0.5*(1+tanh(TR*(mCO-0.5)));
I(COn1) <+ V(COn1);
I(COn1, COn2) <+ V(COn1,COn2)/Rd;
I(COn2) <+ ddt(Cd*V(COn2));
I(CO)  <+ -V(COn2);
I(CO) <+ V(CO);
end
endmodule
