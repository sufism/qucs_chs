#line 2 "scan_netlist.cpp"

#line 4 "scan_netlist.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer netlist__create_buffer
#define yy_delete_buffer netlist__delete_buffer
#define yy_flex_debug netlist__flex_debug
#define yy_init_buffer netlist__init_buffer
#define yy_flush_buffer netlist__flush_buffer
#define yy_load_buffer_state netlist__load_buffer_state
#define yy_switch_to_buffer netlist__switch_to_buffer
#define yyin netlist_in
#define yyleng netlist_leng
#define yylex netlist_lex
#define yylineno netlist_lineno
#define yyout netlist_out
#define yyrestart netlist_restart
#define yytext netlist_text
#define yywrap netlist_wrap
#define yyalloc netlist_alloc
#define yyrealloc netlist_realloc
#define yyfree netlist_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE netlist_restart(netlist_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int netlist_leng;

extern FILE *netlist_in, *netlist_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE netlist_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-netlist_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < netlist_leng; ++yyl )\
                    if ( netlist_text[yyl] == '\n' )\
                        --netlist_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up netlist_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up netlist_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via netlist_restart()), so that the user can continue scanning by
	 * just pointing netlist_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when netlist_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int netlist_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow netlist_wrap()'s to do buffer switches
 * instead of setting up a fresh netlist_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void netlist_restart (FILE *input_file  );
void netlist__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE netlist__create_buffer (FILE *file,int size  );
void netlist__delete_buffer (YY_BUFFER_STATE b  );
void netlist__flush_buffer (YY_BUFFER_STATE b  );
void netlist_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void netlist_pop_buffer_state (void );

static void netlist_ensure_buffer_stack (void );
static void netlist__load_buffer_state (void );
static void netlist__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER netlist__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE netlist__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE netlist__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE netlist__scan_bytes (yyconst char *bytes,int len  );

void *netlist_alloc (yy_size_t  );
void *netlist_realloc (void *,yy_size_t  );
void netlist_free (void *  );

#define yy_new_buffer netlist__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        netlist_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            netlist__create_buffer(netlist_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        netlist_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            netlist__create_buffer(netlist_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define netlist_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *netlist_in = (FILE *) 0, *netlist_out = (FILE *) 0;

typedef int yy_state_type;

extern int netlist_lineno;

int netlist_lineno = 1;

extern char *netlist_text;
#define yytext_ptr netlist_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up netlist_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	netlist_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 47
#define YY_END_OF_BUFFER 48
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[238] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   48,   22,
       19,   18,   22,   21,   20,   22,   15,    8,   16,   14,
       17,    1,    5,    1,    1,    1,    5,   12,   22,   13,
        5,    1,    5,    5,    1,    5,   22,   23,   24,   23,
       28,   27,   26,   28,   25,   28,   28,    8,   14,    1,
        5,    1,    1,    5,   12,   13,    5,    1,    5,    5,
        1,    5,   28,   46,   19,   45,   46,   38,   29,   46,
       46,   29,   46,   40,   39,   36,   46,   37,   42,   46,
       41,   46,   18,    0,    8,    9,    0,    8,    0,    0,
        0,   10,    0,    6,    0,    5,    0,    1,    1,    5,

        5,    1,    5,   19,    0,    1,    1,    0,    5,    5,
        1,    0,   24,   26,    0,    5,    1,    1,    5,    1,
        5,    1,    1,    0,    5,    5,    1,   45,   32,   34,
        0,   44,   40,   40,    0,   40,   40,   40,    0,    0,
       31,   33,   30,    0,   42,   41,    0,   41,   41,   42,
       35,    0,    9,    0,    0,    0,    8,    0,   10,    5,
       11,    5,    2,    1,    1,    5,    5,    7,    5,    5,
        1,    1,    5,    5,    0,   43,   40,    0,    0,   40,
       40,   42,   41,    0,   41,   41,   42,   41,    9,    0,
        0,    8,    0,   10,    0,    5,    0,    5,    5,    5,

        0,   40,   40,   41,   41,   41,   42,   42,    0,   41,
       41,    0,    9,    0,    3,    0,    0,   10,    0,    5,
        5,   41,    0,   41,   41,   41,    9,    0,    0,    0,
       10,   41,   41,   41,    0,    4,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,    9,
        9,    9,   12,   13,   12,   14,    9,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   16,   17,   18,
       19,   20,    9,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   23,   23,   29,   23,   30,   23,   31,   32,
       23,   23,   33,   34,   23,   35,   36,   23,   23,   23,
       37,   38,   39,    9,   23,    1,   40,   23,   23,   41,

       42,   43,   23,   44,   45,   46,   47,   48,   49,   50,
       23,   51,   52,   23,   53,   54,   55,   23,   23,   23,
       56,   57,   58,   59,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    3,    3,    4,    5,    1,    1,    1,    1,
        1,    1,    1,    6,    7,    1,    1,    1,    8,    1,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    1,    1,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    1,    9
    } ;

static yyconst flex_int16_t yy_base[249] =
    {   0,
        0,    0,   58,   60,   64,    0,  124,    0,  717,  856,
      856,  856,  710,  856,  856,  171,  185,  177,  856,  856,
      856,  191,  193,  222,  652,  228,  254,  856,  200,  856,
      264,  154,  274,  285,  166,  300,    0,  856,  856,  700,
      856,  856,  856,  699,  856,  199,  686,  297,  856,  682,
      681,  330,  174,  218,  856,  856,  207,  637,  211,  223,
      190,  226,    0,  856,  856,  856,  685,  668,  856,  672,
      670,  856,  659,  382,  856,  653,  652,  646,  311,  260,
      436,  602,  856,  636,  303,  267,  305,  308,  604,  249,
      234,  282,  333,  856,    0,  362,    0,  372,  387,  434,

      440,  487,  493,  856,  635,  282,  503,  618,  509,  357,
      388,  558,  856,  856,    0,  598,  597,  251,  240,  596,
      278,  277,  580,  571,  442,  307,  571,  856,  856,  856,
      568,  856,  488,  373,  563,    0,  345,  856,  536,  358,
      856,  856,  856,    0,  524,  550,  539,  369,  530,  531,
      856,  526,  506,  405,  496,  510,  525,  503,  532,  554,
      856,  547,  573,  452,  436,  602,  594,  856,  468,  287,
        0,    0,  588,  450,  464,  856,  406,  437,  458,  445,
      291,  562,  856,  436,  643,  620,  635,  650,  385,  457,
      432,  614,  626,  485,  459,  695,  428,  664,  482,  420,

      413,  411,  856,  320,  706,  710,  714,  725,  404,  466,
      729,  504,  393,  651,  558,  580,  389,  380,  375,  736,
      551,  856,  370,  599,  740,  661,  365,  618,  312,  332,
      288,  262,  744,  257,  211,  856,  856,  795,  803,  811,
      814,  821,  829,  213,  837,  194,  846,  187
    } ;

static yyconst flex_int16_t yy_def[249] =
    {   0,
      237,    1,  238,  238,  237,    5,  237,    7,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  239,  239,  239,   24,  239,  239,  237,  237,  237,
      239,   24,  239,  239,   24,  239,  240,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  241,
      241,  241,  241,  241,  237,  237,  241,   52,  241,  241,
       52,  241,  240,  237,  237,  237,  237,  237,  237,  237,
      242,  237,  237,  237,  237,  237,  237,  237,  243,  237,
      243,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  244,  239,  245,  239,  239,  239,

      239,  239,  239,  237,  237,   24,  239,  244,  239,  109,
      109,  240,  237,  237,  246,  241,  241,  241,  241,  241,
      241,   52,  241,  246,  241,  241,  241,  237,  237,  237,
      247,  237,   74,  133,  237,   74,  237,  237,  237,  237,
      237,  237,  237,  248,  243,  237,  248,   81,  243,  243,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  244,
      237,  109,  109,   24,   24,  244,  109,  237,  246,  241,
       52,   52,  246,  241,  247,  237,  237,  237,  237,  134,
      237,  248,  237,  237,  248,  243,  243,  243,  237,  237,
      237,  237,  237,  237,  237,  244,  237,  109,  246,  241,

      237,  134,  237,  237,  248,  248,  248,  248,  237,   81,
      243,  237,  237,  237,  237,  237,  237,  237,  237,  244,
      246,  237,  237,  185,  248,  146,  237,  237,  237,  237,
      237,  226,  248,  226,  237,  237,    0,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237
    } ;

static yyconst flex_int16_t yy_nxt[917] =
    {   0,
       10,   11,   12,   13,   11,   10,   14,   15,   10,   10,
       10,   16,   10,   17,   18,   19,   20,   10,   21,   10,
       22,   23,   23,   23,   24,   22,   25,   26,   22,   25,
       27,   25,   22,   25,   22,   22,   28,   29,   30,   25,
       31,   23,   32,   23,   33,   34,   25,   23,   35,   25,
       25,   23,   22,   23,   25,   36,   23,   37,   10,   10,
       39,   40,   39,   40,   41,   42,   43,   44,   42,   41,
       45,   41,   41,   41,   41,   46,   41,   47,   48,   41,
       49,   41,   41,   41,   50,   51,   51,   51,   52,   50,
       52,   53,   50,   52,   54,   52,   50,   52,   50,   50,

       55,   41,   56,   52,   57,   51,   58,   51,   59,   60,
       52,   51,   61,   52,   52,   51,   50,   51,   52,   62,
       51,   63,   41,   41,   64,   65,   66,   67,   65,   68,
       69,   64,   69,   70,   71,   69,   72,   73,   74,   69,
       75,   76,   77,   78,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       69,   80,   69,   79,   79,   79,   79,   79,   81,   81,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   64,   82,   64,   84,   85,   87,  115,   90,   87,
       84,   85,   93,  182,   93,   93,   94,   93,   94,   88,

      169,   91,  104,  105,   95,   96,   95,  107,   89,   97,
      110,   97,   84,   85,  111,   86,   86,   96,   91,  160,
      115,   92,   92,   93,  124,  125,   93,   94,  122,   93,
      120,  115,   93,   94,  126,   95,  124,  125,  127,  115,
       97,   95,   98,   86,   86,  156,   97,   98,  157,   99,
       98,  236,  100,  115,   98,   93,   98,   98,   93,   94,
      123,  121,  104,  105,  115,   93,  123,   95,   93,   94,
       98,  237,   97,  101,   98,   93,  232,   95,   93,   94,
      152,  153,   97,  170,  102,  106,   93,  108,  109,   93,
       94,  115,   97,   92,   92,  158,  159,  103,  108,  109,

      115,   93,  231,   97,   93,   94,   87,  117,   90,   87,
       84,   85,   93,   95,   90,   93,   84,   85,   97,   90,
      115,   91,   88,  107,  144,  171,  120,   91,   89,   97,
      164,  172,  154,   96,   93,  117,  165,   93,   91,  203,
      107,   92,   92,  115,   91,  203,  231,   92,   92,  154,
      117,   97,   92,   92,  123,  117,  179,  118,  117,  180,
      119,  235,  117,   93,  117,  117,   93,   94,  222,  179,
       95,   96,  180,   93,  222,   95,   93,   94,  117,  227,
       97,   96,  117,  134,  232,   95,  134,  237,   93,  227,
       97,   93,   94,  186,  218,  135,  136,  138,   96,  189,

       95,   95,   96,  218,  107,   97,  137,  213,  138,  212,
      187,  138,   96,  138,  237,  138,  191,  201,  226,  192,
      202,  138,  139,  140,  138,  202,  212,  202,  138,   96,
      138,  138,  138,  115,  200,   93,  138,  146,   93,   94,
      146,   93,  213,   98,   93,   94,  192,   95,  201,  147,
      148,  202,   97,   95,   97,  124,  125,  204,   97,  180,
      149,  197,  149,  115,  200,  149,  174,  149,  197,  149,
      217,  213,  180,  218,  132,  149,  150,  162,  149,  144,
      210,  115,  149,  174,  149,  149,  149,   96,   93,  163,
      149,   93,   94,  219,   93,  115,  221,   93,   94,  194,

       95,  237,  133,   96,   93,   97,   95,   93,   94,  216,
       93,   97,  177,   93,   94,  219,   95,  194,  227,  152,
      153,   97,  108,  109,  157,   93,  216,   97,   93,  178,
      190,   93,   93,  167,   93,   93,   90,  144,  193,  157,
      189,  102,   97,  144,  144,  158,  159,  190,   97,   97,
      167,  146,  188,  185,  146,   93,  195,  181,   93,  228,
       95,   96,  228,   93,  115,  221,   93,   95,   97,   92,
       92,   96,   97,  195,  183,  144,  183,  133,  176,  183,
       97,  183,  229,  183,  115,  173,   95,   96,   96,  183,
      184,  230,  183,  115,  231,   98,  183,   96,  183,  183,

      183,  115,  173,   93,  183,  197,   93,   95,  198,  115,
      115,  115,  199,  224,   96,   95,  166,  168,   96,  228,
       97,   93,  228,  206,   93,   90,  196,  214,  192,  199,
      214,  209,  166,  144,  210,   96,   93,  104,   97,   93,
      182,  215,  229,  196,  146,  155,  209,  146,  144,  210,
       88,   93,  214,   97,   93,  214,  144,  185,   92,   92,
      151,   97,  234,  144,  143,  234,  215,  205,   97,  206,
      142,  141,  206,  133,  206,  226,  206,   95,  198,  237,
      132,  130,  206,  207,  208,  206,  129,  128,   96,  206,
      123,  206,  206,  206,  115,  115,   93,  206,  211,   93,

       88,  114,  113,   96,  211,   96,  219,   93,   95,  220,
       93,   93,   83,   97,   93,   93,  237,  223,   93,  144,
      224,  237,  237,  144,   97,  237,   93,  144,   97,   93,
       93,  237,   97,   93,  237,  225,  223,   93,  144,  224,
       93,   93,  144,   97,   93,   93,  237,   97,   93,   95,
      220,  237,  237,  144,   97,  237,  237,  144,   97,  237,
      237,  237,   97,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  233,  237,
      237,  237,  237,  237,  233,   38,   38,   38,   38,   38,

       38,   38,   38,   38,   96,  237,   96,   96,   96,   96,
       96,  112,  237,  237,  112,  112,  112,  112,  112,  116,
      116,  131,  131,  237,  131,  131,  131,  131,  131,  131,
      145,  237,  145,  237,  145,  145,  145,  161,  161,  161,
      161,  161,  161,  161,  237,  161,  175,  175,  237,  175,
      175,  175,  175,  175,  175,    9,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237
    } ;

static yyconst flex_int16_t yy_chk[917] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   16,   16,   17,   53,   18,   17,
       18,   18,   22,  248,   23,   22,   22,   23,   23,   17,

      246,   18,   29,   29,   22,   32,   23,   32,   17,   22,
       35,   23,   46,   46,   35,   16,   16,   35,   18,  244,
       57,   18,   18,   24,   59,   59,   24,   24,   57,   26,
       53,   54,   26,   26,   61,   24,   60,   60,   61,   62,
       24,   26,   24,   46,   46,   91,   26,   24,   91,   24,
       24,  235,   24,  119,   24,   27,   24,   24,   27,   27,
       59,   54,   80,   80,  118,   31,   62,   27,   31,   31,
       24,  234,   27,   24,   24,   33,  232,   31,   33,   33,
       86,   86,   31,  119,   26,   31,   34,   33,   33,   34,
       34,  121,   33,   90,   90,   92,   92,   27,   34,   34,

      170,   36,  231,   34,   36,   36,   87,  118,   48,   87,
       48,   48,   79,   36,   85,   79,   85,   85,   36,   88,
      126,   48,   88,   33,   79,  122,  121,   85,   87,   79,
      106,  122,   88,  106,   93,  170,  106,   93,   48,  181,
       36,   48,   48,   52,   85,  181,  230,   85,   85,   88,
       52,   93,   88,   88,  126,   52,  137,   52,   52,  137,
       52,  229,   52,   96,   52,   52,   96,   96,  204,  140,
      110,  110,  140,   98,  204,   96,   98,   98,   52,  227,
       96,  110,   52,   74,  223,   98,   74,  134,   99,  219,
       98,   99,   99,  148,  218,   74,   74,  134,  110,  189,

       99,  111,  111,  217,  110,   99,   74,  213,   74,  189,
      148,   74,  111,   74,  134,   74,  154,  177,  209,  154,
      177,   74,   74,   74,   74,  202,  189,  201,   74,  111,
       74,   74,   74,  200,  200,  100,   74,   81,  100,  100,
       81,  101,  197,   99,  101,  101,  191,  100,  178,   81,
       81,  178,  100,  101,   81,  125,  125,  184,  101,  180,
       81,  174,   81,  174,  174,   81,  125,   81,  190,   81,
      195,  190,  179,  195,  175,   81,   81,  100,   81,  210,
      210,  169,   81,  125,   81,   81,   81,  165,  102,  101,
       81,  102,  102,  199,  103,  199,  199,  103,  103,  194,

      102,  133,  133,  164,  107,  102,  103,  107,  107,  194,
      109,  103,  133,  109,  109,  212,  107,  158,  212,  153,
      153,  107,  109,  109,  156,  145,  194,  109,  145,  133,
      153,  149,  150,  109,  149,  150,  157,  145,  155,  157,
      152,  103,  145,  149,  150,  159,  159,  153,  149,  150,
      109,  146,  150,  147,  146,  160,  159,  139,  160,  215,
      162,  162,  215,  182,  221,  221,  182,  160,  146,  157,
      157,  162,  160,  159,  146,  182,  146,  135,  131,  146,
      182,  146,  215,  146,  127,  124,  163,  163,  162,  146,
      146,  216,  146,  123,  216,  162,  146,  163,  146,  146,

      146,  173,  173,  166,  146,  167,  166,  167,  167,  120,
      117,  116,  173,  224,  163,  166,  166,  112,  167,  228,
      166,  186,  228,  224,  186,  192,  166,  193,  192,  173,
      193,  186,  108,  186,  186,  167,  187,  105,  186,  187,
      224,  193,  228,  166,  185,   89,  187,  185,  187,  187,
       84,  188,  214,  187,  188,  214,  185,  185,  192,  192,
       82,  185,  226,  188,   78,  226,  214,  185,  188,  185,
       77,   76,  185,   73,  185,  226,  185,  198,  198,  226,
       71,   70,  185,  185,  185,  185,   68,   67,  198,  185,
       58,  185,  185,  185,   51,   50,  196,  185,  188,  196,

       47,   44,   40,   25,  188,  198,  196,  205,  196,  196,
      205,  206,   13,  196,  206,  207,    9,  205,  207,  205,
      205,    0,    0,  206,  205,    0,  208,  207,  206,  208,
      211,    0,  207,  211,    0,  207,  208,  220,  208,  208,
      220,  225,  211,  208,  225,  233,    0,  211,  233,  220,
      220,    0,    0,  225,  220,    0,    0,  233,  225,    0,
        0,    0,  233,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  225,    0,
        0,    0,    0,    0,  225,  238,  238,  238,  238,  238,

      238,  238,  238,  238,  239,    0,  239,  239,  239,  239,
      239,  240,    0,    0,  240,  240,  240,  240,  240,  241,
      241,  242,  242,    0,  242,  242,  242,  242,  242,  242,
      243,    0,  243,    0,  243,  243,  243,  245,  245,  245,
      245,  245,  245,  245,    0,  245,  247,  247,    0,  247,
      247,  247,  247,  247,  247,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,

      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[48] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 
    0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int netlist__flex_debug;
int netlist__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *netlist_text;
#line 1 "scan_netlist.l"
/* -*-c-*- */
#line 4 "scan_netlist.l"
/*
 * scan_netlist.l - scanner for the Qucs netlist
 *
 * Copyright (C) 2003-2009 Stefan Jahn <stefan@lkcc.org>
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this package; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA 02110-1301, USA.  
 *
 * $Id$
 *
 */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#ifdef __MINGW32__
#include <io.h>
#endif

#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include "logging.h"
#include "equation.h"
#include "check_netlist.h"
#include "tokens_netlist.h"

#if !HAVE_STRCHR
# define strchr  index
# define strrchr rindex
#endif

static double netlist_evaluate_scale (double val, char * scale) {
  double factor = 1.0;
  while (isspace (scale[0])) scale++;
  switch (scale[0]) {
  case 'E': factor = 1e+18; break;
  case 'P': factor = 1e+15; break;
  case 'T': factor = 1e+12; break;
  case 'G': factor = 1e+09; break;
  case 'M': factor = 1e+06; break;
  case 'k': factor = 1e+03; break;
  case 'm':
    if (scale[1] == 'i' && scale[2] == 'l')
      factor = 2.54e-5;
    else
      factor = 1e-03;
    break;
  case 'u': factor = 1e-06; break;
  case 'n': factor = 1e-09; break;
  case 'p': factor = 1e-12; break;
  case 'f': 
    if (scale[1] == 't')
      factor = 0.3048;
    else
      factor = 1e-15;
    break;
  case 'a': factor = 1e-18; break;
  case 'd':
    if (scale[1] == 'B') {
      val = pow (10.0, val / 10.0);
      if (scale[2] == 'm')
	factor = 1e-03;
      else if (scale[2] == 'u')
	factor = 1e-06;
    }
    break;
  case 'i':
    if (scale[1] == 'n')
      factor = 2.54e-2;
    break;
  case 'y':
    if (scale[1] == 'd')
      factor = 0.9144;
    break;
  }
  return val * factor;
}


#line 884 "scan_netlist.cpp"

#define INITIAL 0
#define COMMENT 1
#define STR 2
#define EQN 3

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int netlist_lex_destroy (void );

int netlist_get_debug (void );

void netlist_set_debug (int debug_flag  );

YY_EXTRA_TYPE netlist_get_extra (void );

void netlist_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *netlist_get_in (void );

void netlist_set_in  (FILE * in_str  );

FILE *netlist_get_out (void );

void netlist_set_out  (FILE * out_str  );

int netlist_get_leng (void );

char *netlist_get_text (void );

int netlist_get_lineno (void );

void netlist_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int netlist_wrap (void );
#else
extern int netlist_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( netlist_text, netlist_leng, 1, netlist_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( netlist_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( netlist_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, netlist_in))==0 && ferror(netlist_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(netlist_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int netlist_lex (void);

#define YY_DECL int netlist_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after netlist_text and netlist_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 145 "scan_netlist.l"


#line 1067 "scan_netlist.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! netlist_in )
			netlist_in = stdin;

		if ( ! netlist_out )
			netlist_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			netlist_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				netlist__create_buffer(netlist_in,YY_BUF_SIZE );
		}

		netlist__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of netlist_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 238 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 856 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < netlist_leng; ++yyl )
				if ( netlist_text[yyl] == '\n' )
					   
    netlist_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "scan_netlist.l"
{ /* identify scale and/or unit */
    netlist_lval.str = strdup (netlist_text);
    return ScaleOrUnit;
  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 151 "scan_netlist.l"
{ /* special equation case */
    BEGIN(EQN);
    return Eqn;
  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 155 "scan_netlist.l"
{
    /* subcircuit definition begins */
    return DefSub;
  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 159 "scan_netlist.l"
{
    /* subcircuit definition ends */
    return EndSub;
  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 163 "scan_netlist.l"
{ /* identify identifier */
    netlist_lval.ident = strdup (netlist_text);
    return Identifier;
  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 167 "scan_netlist.l"
{ /* identify node identifier */
    netlist_lval.ident = strdup (netlist_text);
    return Identifier;
  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 171 "scan_netlist.l"
{ /* identify file reference */
    char * p = strrchr (netlist_text, '}'); *p = '\0';
    netlist_lval.ident = strdup (&netlist_text[1]);
    return Identifier;
  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 176 "scan_netlist.l"
{ /* identify (signed) real float */
    netlist_lval.d = strtod (netlist_text, NULL);
    return REAL;
  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 180 "scan_netlist.l"
{ /* identify (signed) imaginary float */
    if (netlist_text[0] == 'i' || netlist_text[0] == 'j')
      netlist_text[0] = (netlist_text[1] == '\0') ? '1' : '0';
    else
      netlist_text[1] = '0';
    netlist_lval.d = strtod (netlist_text, NULL);
    return IMAG;
  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 188 "scan_netlist.l"
{ /* identify complete (signed) complex number */
    int i = 0;
    while (netlist_text[i] != 'i' && netlist_text[i] != 'j') i++;
    netlist_text[i] = netlist_text[i - 1];
    netlist_text[i - 1] = '\0';
    netlist_lval.c.r = strtod (netlist_text, NULL);
    netlist_lval.c.i = strtod (&netlist_text[i], NULL);
    return COMPLEX;
  }
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 197 "scan_netlist.l"
{  /* identify 'identifier =' assign */
    int len = netlist_leng - 3;
    while (isspace (netlist_text[len])) len--;
    netlist_lval.ident = (char *) calloc (len + 2, 1);
    memcpy (netlist_lval.ident, netlist_text, len + 1);
    yyless (netlist_leng - 1); /* push back last character */
    return Assign; 
  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 206 "scan_netlist.l"
{ /* special token for the value list */ return '['; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 207 "scan_netlist.l"
{ /* special token for the value list */ return ']'; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 208 "scan_netlist.l"
{ /* special token for the value list */ return ';'; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 210 "scan_netlist.l"
{ /* pass the '.' to the parser */ return '.'; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 211 "scan_netlist.l"
{ /* pass the ':' to the parser */ return ':'; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 212 "scan_netlist.l"
{ /* pass the '=' to the parser */ return '='; }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 213 "scan_netlist.l"
{ /* detect end of line */ return Eol; }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 215 "scan_netlist.l"
/* skip spaces and the trailing '\' */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 217 "scan_netlist.l"
{ /* leave these characters */
    BEGIN(COMMENT);
  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 220 "scan_netlist.l"
{ /* string constant starts here */
    BEGIN(STR);  
    return '"';
  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 224 "scan_netlist.l"
{ /* any other character in invalid */
    logprint (LOG_ERROR, 
	      "line %d: syntax error, unrecognized character: `%s'\n", 
	      netlist_lineno, netlist_text);
    return InvalidCharacter;
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 231 "scan_netlist.l"
{ /* skip any character in here */ }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 232 "scan_netlist.l"
{ BEGIN(INITIAL); /* skipping ends here */ }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 234 "scan_netlist.l"
{ /* string constant ends here */
    BEGIN(INITIAL); 
    return '"';
  }
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 238 "scan_netlist.l"
{ /* string in a single line only */
    logprint (LOG_ERROR, 
	      "line %d: syntax error, unterminated string constant\n",
	      netlist_lineno);
    return Eol;
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 244 "scan_netlist.l"
/* skip spaces */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 246 "scan_netlist.l"
{ /* any other character is invalid */
    logprint (LOG_ERROR, 
	      "line %d: syntax error, unrecognized character: `%s'\n", 
	      netlist_lineno, netlist_text);
    return InvalidCharacter;
  }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 253 "scan_netlist.l"
{ /* return operators unchanged */
    return netlist_text[0];
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 257 "scan_netlist.l"
{ return GreaterOrEqual; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 258 "scan_netlist.l"
{ return LessOrEqual; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 259 "scan_netlist.l"
{ return NotEqual; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 260 "scan_netlist.l"
{ return Equal; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 261 "scan_netlist.l"
{ return And; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 262 "scan_netlist.l"
{ return Or; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 263 "scan_netlist.l"
{ return Less; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 264 "scan_netlist.l"
{ return Greater; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 265 "scan_netlist.l"
{ return Not; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 267 "scan_netlist.l"
{ /* special tokens for vectors / matrices */
    return netlist_text[0];
  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 271 "scan_netlist.l"
{ /* identify unsigned real float */
    char * endptr = NULL;
    netlist_lval.d = strtod (netlist_text, &endptr);
    netlist_lval.d = netlist_evaluate_scale (netlist_lval.d, endptr);
    return REAL;
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 277 "scan_netlist.l"
{ /* identify unsigned imaginary float */
    if (netlist_text[0] == 'i' || netlist_text[0] == 'j')
      netlist_text[0] = (netlist_text[1] == '\0') ? '1' : '0';
    else
      netlist_text[1] = '0';
    char * endptr = NULL;
    netlist_lval.d = strtod (netlist_text, &endptr);
    netlist_lval.d = netlist_evaluate_scale (netlist_lval.d, endptr);
    return IMAG;
  }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 287 "scan_netlist.l"
{ /* identify identifier */
    netlist_lval.ident = strdup (netlist_text);
    return Identifier;
  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 291 "scan_netlist.l"
{
    netlist_lval.chr = netlist_text[1];
    return Character;
  }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 295 "scan_netlist.l"
{
    netlist_lval.str = strdup (&netlist_text[1]);
    netlist_lval.str[strlen (netlist_lval.str) - 1] = '\0';
    return STRING;
  }
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 300 "scan_netlist.l"
{ /* detect end of line */ BEGIN(INITIAL); return Eol; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 302 "scan_netlist.l"
{ /* any other character in invalid */
    logprint (LOG_ERROR, 
	      "line %d: syntax error, unrecognized character: `%s'\n", 
	      netlist_lineno, netlist_text);
    return InvalidCharacter;
  }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 309 "scan_netlist.l"
ECHO;
	YY_BREAK
#line 1504 "scan_netlist.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(STR):
case YY_STATE_EOF(EQN):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed netlist_in at a new source and called
			 * netlist_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = netlist_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( netlist_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * netlist_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of netlist_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					netlist_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			netlist_restart(netlist_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) netlist_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 238 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 238 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 237);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					netlist_restart(netlist_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( netlist_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve netlist_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    netlist_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void netlist_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        netlist_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            netlist__create_buffer(netlist_in,YY_BUF_SIZE );
	}

	netlist__init_buffer(YY_CURRENT_BUFFER,input_file );
	netlist__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void netlist__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		netlist_pop_buffer_state();
	 *		netlist_push_buffer_state(new_buffer);
     */
	netlist_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	netlist__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (netlist_wrap()) processing, but the only time this flag
	 * is looked at is after netlist_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void netlist__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	netlist_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE netlist__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) netlist_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in netlist__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) netlist_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in netlist__create_buffer()" );

	b->yy_is_our_buffer = 1;

	netlist__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with netlist__create_buffer()
 * 
 */
    void netlist__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		netlist_free((void *) b->yy_ch_buf  );

	netlist_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a netlist_restart() or at EOF.
 */
    static void netlist__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	netlist__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then netlist__init_buffer was _probably_
     * called from netlist_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void netlist__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		netlist__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void netlist_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	netlist_ensure_buffer_stack();

	/* This block is copied from netlist__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from netlist__switch_to_buffer. */
	netlist__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void netlist_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	netlist__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		netlist__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void netlist_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)netlist_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in netlist_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)netlist_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in netlist_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE netlist__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) netlist_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in netlist__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	netlist__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to netlist_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       netlist__scan_bytes() instead.
 */
YY_BUFFER_STATE netlist__scan_string (yyconst char * yystr )
{
    
	return netlist__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to netlist_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE netlist__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) netlist_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in netlist__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = netlist__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in netlist__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up netlist_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		netlist_text[netlist_leng] = (yy_hold_char); \
		(yy_c_buf_p) = netlist_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		netlist_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int netlist_get_lineno  (void)
{
        
    return netlist_lineno;
}

/** Get the input stream.
 * 
 */
FILE *netlist_get_in  (void)
{
        return netlist_in;
}

/** Get the output stream.
 * 
 */
FILE *netlist_get_out  (void)
{
        return netlist_out;
}

/** Get the length of the current token.
 * 
 */
int netlist_get_leng  (void)
{
        return netlist_leng;
}

/** Get the current token.
 * 
 */

char *netlist_get_text  (void)
{
        return netlist_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void netlist_set_lineno (int  line_number )
{
    
    netlist_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see netlist__switch_to_buffer
 */
void netlist_set_in (FILE *  in_str )
{
        netlist_in = in_str ;
}

void netlist_set_out (FILE *  out_str )
{
        netlist_out = out_str ;
}

int netlist_get_debug  (void)
{
        return netlist__flex_debug;
}

void netlist_set_debug (int  bdebug )
{
        netlist__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from netlist_lex_destroy(), so don't allocate here.
     */

    /* We do not touch netlist_lineno unless the option is enabled. */
    netlist_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    netlist_in = stdin;
    netlist_out = stdout;
#else
    netlist_in = (FILE *) 0;
    netlist_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * netlist_lex_init()
     */
    return 0;
}

/* netlist_lex_destroy is for both reentrant and non-reentrant scanners. */
int netlist_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		netlist__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		netlist_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	netlist_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * netlist_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *netlist_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *netlist_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void netlist_free (void * ptr )
{
	free( (char *) ptr );	/* see netlist_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 309 "scan_netlist.l"



